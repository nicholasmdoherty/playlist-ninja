{"version":3,"sources":["common/constants.js","modules/spotify-sign-in/SpotifyLoginButton.jsx","modules/spotify-sign-in/LoginPage.jsx","modules/spotify-sign-in/SpotifyLogoutButton.jsx","redux/actions/apiActions.js","common/components/Navbar/Navbar.jsx","redux/actions/playlistActions.js","modules/profile/subcomponents/personal-playlists/PersonalPlaylists.jsx","modules/profile/subcomponents/TopArtists/TopArtists.jsx","modules/profile/subcomponents/TopTracks/TopTracks.jsx","modules/profile/Profile.jsx","common/components/Spacer.jsx","modules/playlist-builder/subcomponents/Tracklist/TrackTable.jsx","modules/playlist-builder/subcomponents/PlaylistInfo.jsx","modules/playlist-builder/subcomponents/Tracklist/PlaylistTracklist.jsx","modules/playlist-builder/subcomponents/Recommendations/Recommendations.jsx","modules/playlist-builder/subcomponents/PlaylistStatistics/PlaylistStatistics.jsx","modules/playlist-builder/PlaylistBuilder.jsx","modules/mutual-melodies-preference-quiz/subcomponents/LikertScaleInput.jsx","modules/mutual-melodies-preference-quiz/subcomponents/Question.jsx","modules/mutual-melodies-preference-quiz/MutualMelodiesPreferenceQuiz.jsx","App.js","serviceWorker.js","redux/reducers/rootReducer.js","redux/reducers/apiReducer.js","redux/reducers/playlistReducer.js","index.js","store.js"],"names":["clientID","setCookie","cname","cvalue","expirationHours","d","Date","setTime","getTime","expires","toUTCString","document","cookie","deepCamelCaseKeys","variable","Array","forEach","object","index","Object","keys","key","camelCaseKeys","SpotifyLoginButton","props","autoBind","data","token","access_token","location","reload","buttonText","clientId","redirectUri","onSuccess","this","handleAccessToken","onFailure","error","console","log","scope","id","className","Component","LoginPage","src","setUserId","userId","dispatch","type","payload","connect","state","api","setUserIdInRedux","useState","profileData","setProfileData","setProfileError","useEffect","spotifyApi","getMe","then","profile","body","images","displayName","to","activeClassName","width","height","length","url","icon","onClick","setSelectedPlaylist","playlistId","a","playlistResponse","getPlaylist","notAllTracks","tracks","next","items","offset","getPlaylistTracks","concat","window","hash","playlists","playlist","editablePlaylists","loadEditablePlaylists","playlistsResponse","getUserPlaylists","limit","response","notAllPlaylists","morePlaylistsResponse","filter","owner","collaborative","loadUsersEditablePlaylists","updateSelectedPlaylist","title","loading","setLoading","activePage","setActivePage","numPages","setNumPages","newUserID","Math","ceil","startNumber","playlistsToShow","slice","Fragment","map","alt","name","onError","currentTarget","onerror","renderPlaylistPage","topArtists4Weeks","setTopArtists4Weeks","topArtists6Months","setTopArtists6Months","topArtistsAllTime","setTopArtistsAllTime","activeView","setActiveView","setError","getMyTopArtists","time_range","renderArtist","artist","renderTopArtists","topTracks4Weeks","setTopTracks4Weeks","topTracks6Months","setTopTracks6Months","topTracksAllTime","setTopTracksAllTime","getMyTopTracks","renderTrack","track","album","renderTopTracks","Profile","setState","forceUpdate","Row","Col","xs","TrackTable","renderTrackRow","Image","handlePlayTrackOnSpotify","tracksInPlaylist","handleRemoveTrackFromPlaylist","handleAddTrackToPlaylist","spotifyTrackId","play","context_uri","uri","uris","addTracksToPlaylist","updateCallback","removeTracksFromPlaylist","PlaylistTracklist","numberPerPage","renderPaginationButton","currentPage","changeCurrentPageHandler","renderSearchBar","renderSortDropdown","newPageIndex","tracksCopy","playlistTrack","Recommendations","recommendedTracks","selectedArtistSeeds","0","1","2","selectedTrackSeeds","targetValence","targetEnergy","targetDanceability","targetBPM","targetPopularity","addEventListener","handleRecommendationGeneration","atLeastOneSeedSelected","updateRecommendations","seedArtistIds","seedIndex","push","seedTrackIds","query","target_bpm","target_valence","target_energy","target_danceability","target_popularity","seed_artists","seed_tracks","getRecommendations","message","artistSeeds","trackSeeds","event","target","value","playlistTracks","artists","artistIdArray","seedNumber","as","onChange","handleAddSeedArtist","disabled","numberOfSeedsFull","artistId","trackIdArray","handleAddSeedTrack","trackId","min","max","step","defaultValue","renderSeedTracksDropdown","renderSeedArtistsDropdown","renderAudioFeatureSliders","PlaylistStatistics","playlistStats","setPlaylistStats","calculateAverageStatistics","useCallback","statistics","tempo","danceability","valence","energy","durationMs","popularity","trackIds","haveToLoop","trackStatistics","getAudioFeaturesForTracks","splice","audioFeatures","numOfStatisticsReceived","trackStatistic","renderPercetangeBar","percent","style","round","toFixed","duration","ms","seconds","hours","floor","minutes","msToHM","display_name","followers","total","public","renderPlaylistInformationView","PlaylistBuilder","selectedPlaylist","description","LikertScaleInput","questionNumber","onInput","updateQuestionChoice","Question","Number","updateQuestionResult","text","bind","questionCategories","INVOLVEMENT_LEVEL","COPING","PERSONAL_IDENTITY","SOCIAL_IDENTITY","MOOD_ENHANCEMENT","MutualMelodiesPreferenceQuiz","preferenceCode","questions","category","updateQuizQuestionResult","newQuestion","topArtists","dimensionScores","RC","IR","UC","ER","i","genres","genre","indexOf","highestScoringKey","reduce","prev","highestDimension","some","question","scoredMusicUseCases","getSortedMusicUseAverages","involvementLevelCode","getInvolvementLevelScore","getMusicDimensionScores","genreDataScore","code","scrollTo","top","left","behavior","getElementById","classList","remove","involvementQuestions","involvementAvg","copingQuestions","moodEnhancementQuestions","socialIdentityQuestions","personalIdentityQuestions","copingAvg","moodEnhancementAvg","socialIdentityAvg","personalIdentityAvg","sort","b","avg","Button","calculateMusicPreferenceCode","App","loggedIn","scrollFunction","checkForLogin","ca","split","c","charAt","substring","getCookie","setSpotifyApi","Container","exact","path","component","React","accessToken","SpotifyWebApi","setAccessToken","setSpotifyApiAction","Boolean","hostname","match","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.286bf304.chunk.js","sourcesContent":["import camelCaseKeys from \"camelcase-keys\";\n\nexport let spotifyScopes =\n  \"user-top-read user-library-read \" +\n  \"playlist-modify-public playlist-read-private playlist-read-collaborative \" +\n  \"user-read-email playlist-modify-private streaming\";\n\nexport let redirectURI = \"http://localhost:3000\";\nexport let clientID = \"90a54f792a9e4fff94eec8d0c0075bd0\";\n\nexport function setCookie(cname, cvalue, expirationHours) {\n  var d = new Date();\n  d.setTime(d.getTime() + expirationHours * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport function getCookie(cname) {\n  var name = cname + \"=\";\n  var ca = document.cookie.split(\";\");\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport function deepCamelCaseKeys(variable) {\n  if (variable === null) {\n    return null;\n  } else if (variable instanceof Array) {\n    variable.forEach((object, index) => {\n      variable[index] = deepCamelCaseKeys(object);\n    });\n\n    return variable;\n  } else if (variable instanceof Object) {\n    Object.keys(variable).forEach((key) => {\n      variable[key] = deepCamelCaseKeys(variable[key]);\n    });\n\n    return camelCaseKeys(variable);\n  } else {\n    return variable;\n  }\n}\n\nexport function isBelowLargeBreakpoint() {\n  return window.innerWidth < 1200;\n}\n\nexport function isBelowMediumBreakpoint() {\n  return window.innerWidth < 992;\n}\n\nexport function isBelowSmallBreakpoint() {\n  return window.innerWidth < 768;\n}\n\nexport function isBelowExtraSmallBreakpoint() {\n  return window.innerWidth < 576;\n}\n\nexport function msToHM(ms) {\n  let seconds = ms / 1000;\n\n  let hours = Math.floor(seconds / 3600);\n  seconds = seconds % 3600;\n\n  let minutes = Math.floor(seconds / 60);\n\n  return {\n    hours,\n    minutes,\n  };\n}\n","import React, { Component } from \"react\";\nimport SpotifyLogin from \"react-spotify-login\";\nimport { spotifyScopes, setCookie } from \"../../common/constants\";\nimport autoBind from \"react-autobind\";\nimport { redirectURI, clientID } from \"../../common/constants\";\nimport \"./sign-in.css\";\n\nclass SpotifyLoginButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  async handleAccessToken(data) {\n    let token = data.access_token;\n\n    // Set the token in cookies, we want to make sure that this happens first so we await it.\n    await setCookie(\"spotifyAccessToken\", token, 1);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <SpotifyLogin\n        buttonText=\"Log in with Spotify\"\n        clientId={clientID}\n        redirectUri={redirectURI}\n        onSuccess={this.handleAccessToken}\n        onFailure={(error) => console.log(error)}\n        scope={spotifyScopes}\n        id=\"login-button\"\n        className=\"log-in-button\"\n      />\n    );\n  }\n}\n\nexport default SpotifyLoginButton;\n","import React from \"react\";\n\nimport SpotifyLoginButton from \"./SpotifyLoginButton\";\n\nimport \"./sign-in.css\";\n\nconst LoginPage = () => {\n\n  return (\n    <div id=\"logged-out-wrapper\">\n      <img id=\"ninja-image\" src=\"/assets/playlistninja-login.png\" />\n      <span className=\"pn-logo-text\">playlistninja.app</span>\n      <div id='login-page-text'>\n        <h1 id=\"sign-in-header\">\n          More control over Spotify recommendations.\n        </h1>\n        <p id='sign-in-subtext'>\n        Finding new music for your playlists just got a lot easier, with more customization over the recommendation algorithm on Spotify.\n        </p>\n        <SpotifyLoginButton />\n      </div>\n      <div id=\"links-container\">\n        <span>Twitter</span>\n        <span>Discord</span>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;","import React, { Component } from \"react\";\nimport { setCookie } from \"../../common/constants\";\nimport { Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass SpotifyLogoutButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  handleLogout() {\n    // remove the cookie from the browser that holds the token to logout\n    setCookie(\"spotifyAccessToken\", \"\", 0);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <Button\n        variant=\"primary\"\n        className=\"pn-danger-button button-font pn-button button-font\"\n        onClick={this.handleLogout}\n      >\n        LOG OUT\n      </Button>\n    );\n  }\n}\n\nexport default SpotifyLogoutButton;\n","import SpotifyWebApi from \"spotify-web-api-node\";\nimport { clientID, redirectURI } from \"../../common/constants\";\n\nexport const setSpotifyApiAction = accessToken => dispatch => {\n  let spotifyApi = new SpotifyWebApi({\n    clientId: clientID,\n    redirectUri: redirectURI\n  });\n\n  spotifyApi.setAccessToken(accessToken);\n\n  dispatch({\n    type: \"SET_SPOTIFY_API\",\n    payload: spotifyApi\n  });\n};\n\nexport const setUserId = userId => dispatch => {\n  dispatch({\n    type: \"SET_USER_ID\",\n    payload: userId\n  });\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { deepCamelCaseKeys, setCookie } from \"../../constants\";\nimport FeatherIcon from 'feather-icons-react'\n\nimport \"./Navbar.css\";\nimport { setUserId } from \"../../../redux/actions/apiActions\";\n\n\nconst Navbar = ({ api, setUserIdInRedux }) => {\n\n  const [profileData, setProfileData] = useState({})\n  const [profileError, setProfileError] = useState({})\n\n  useEffect(() => {\n    api.spotifyApi.getMe().then(\n      data => {\n        let profile = deepCamelCaseKeys(data.body)\n        setProfileData(profile);\n        setUserIdInRedux(profile.id)\n      },\n      error => {\n        setProfileError(deepCamelCaseKeys(error));\n      }\n    );\n  }, [api.spotifyApi, setUserIdInRedux])\n\n  if (!profileData.images || !profileData.displayName) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className=\"main-app-nav\">\n        <span className=\"nav-app-name\">playlistninja.app</span>\n\n        <div className=\"nav-right-container\">\n          <NavLink to=\"/playlist-builder\" activeClassName=\"nav-link-active\">\n            <span className=\"nav-right-link\">\n              Edit Playlist\n            </span>\n          </NavLink>\n          <NavLink to=\"/profile\" activeClassName=\"nav-link-active\">\n            <span className=\"nav-right-link\">\n              My Profile\n            </span>\n          </NavLink>\n          <div className=\"nav-right-logged-in-user\">\n            <img className=\"spotify-account-pic\" width={25} height={25} src={profileData.images.length > 0 ? profileData.images[0].url : null} />\n            <span className='nav-right-username'>{profileData.displayName}</span>\n            <FeatherIcon className=\"logout-button\" icon='x' width={16} height={16}  onClick={() => {\n              setCookie(\"spotifyAccessToken\", \"\", 0);\n              document.location.reload();\n            }}/>\n          </div>\n\n        </div>\n\n      </div>\n      <div className=\"main-app-nav-ghost\" />\n    </div>\n  )\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    setUserIdInRedux: (userId) => {\n      dispatch(setUserId(userId))\n    }\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","export const setSelectedPlaylist = (\n  playlistId,\n  spotifyApi\n) => async dispatch => {\n  let playlistResponse = null;\n\n  await spotifyApi\n    .getPlaylist(playlistId)\n    .then(\n      async data => {\n        playlistResponse = data.body;\n\n        let notAllTracks = playlistResponse.tracks.next;\n\n        playlistResponse.tracks = playlistResponse.tracks.items;\n\n        if (notAllTracks) {\n          let offset = 100;\n\n          while (notAllTracks) {\n            await spotifyApi\n              .getPlaylistTracks(playlistId, { offset })\n              .then(data => {\n                if (!data.body.next) {\n                  notAllTracks = false;\n                }\n\n                offset += 100;\n\n                playlistResponse.tracks = playlistResponse.tracks.concat(\n                  data.body.items\n                );\n              });\n          }\n        }\n      },\n      error => {\n        playlistResponse = error;\n      }\n    )\n    .then(() => {\n      window.location.hash = \"#/playlist-builder\";\n    });\n\n  dispatch({\n    type: \"SET_SELECTED_PLAYLIST\",\n    payload: playlistResponse\n  });\n};\nexport const loadUsersEditablePlaylists = (\n  userId,\n  spotifyApi\n) => async dispatch => {\n  let playlistsResponse = null;\n\n  await spotifyApi.getUserPlaylists(userId, { limit: 50 }).then(\n    async response => {\n      playlistsResponse = response.body.items;\n      let notAllPlaylists = response.body.next;\n\n      if (notAllPlaylists) {\n        let offset = 50;\n\n        while (notAllPlaylists) {\n          await spotifyApi\n            .getUserPlaylists(userId, { limit: 50, offset })\n            .then(morePlaylistsResponse => {\n              if (!morePlaylistsResponse.body.next) {\n                notAllPlaylists = false;\n              }\n\n              offset += 50;\n\n              playlistsResponse = playlistsResponse.concat(\n                morePlaylistsResponse.body.items\n              );\n            });\n        }\n      }\n\n      playlistsResponse = playlistsResponse.filter(playlist => {\n        return playlist.owner.id == userId || playlist.collaborative;\n      });\n    },\n    error => {\n      playlistsResponse = error;\n    }\n  );\n\n  dispatch({\n    type: \"LOAD_EDITABLE_PLAYLISTS\",\n    payload: playlistsResponse\n  });\n};\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux';\nimport FeatherIcon from 'feather-icons-react'\n\nimport { loadUsersEditablePlaylists, setSelectedPlaylist } from '../../../../redux/actions/playlistActions';\n\nimport './PersonalPlaylists.css'\nimport { deepCamelCaseKeys } from '../../../../common/constants';\nimport { setUserId } from '../../../../redux/actions/apiActions';\n\nconst MyPlaylists = ({ title, userId, api, playlists, loadEditablePlaylists, updateSelectedPlaylist, setUserIdInRedux}) => {\n  const numPerPage = 11;\n\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null);\n\n  const [activePage, setActivePage] = useState(1);\n  const [numPages, setNumPages] = useState(1)  \n\n  useEffect(() => {\n    if (userId) {\n      loadEditablePlaylists(userId, api);\n    } else {\n\n      let newUserID = ''\n\n      if (!userId) {\n        api.getMe().then(\n          data => {\n            newUserID = deepCamelCaseKeys(data.body).id\n            setUserIdInRedux(newUserID)\n          }\n        );\n      }\n    }\n  }, [api, loadEditablePlaylists, setUserIdInRedux, userId])\n\n  useEffect(() => {\n    if (playlists.length !== 0) {\n      setNumPages(Math.ceil(playlists.length / numPerPage))\n      setLoading(false)\n    }\n  }, [playlists])\n\n  if (error) {\n    console.log(error)\n    return 'Error'\n  }\n\n\n\n  const renderPaginationButton = () => {\n    return (\n      <div className='playlists-pagination'>\n        <FeatherIcon \n          width={16} \n          height={16} \n          icon=\"chevron-left\" \n          onClick={activePage === 1 ? null : () => { setActivePage(activePage - 1) }}\n          className={`playlists-pagination-arrow ${activePage === 1 ? 'disabled' : ''}`}\n        />\n        Page {activePage} / {numPages}\n        <FeatherIcon \n          width={16} \n          height={16} \n          icon=\"chevron-right\"\n          onClick={activePage === numPages ? null : () =>  { setActivePage(activePage + 1) } }\n          className={`playlists-pagination-arrow ${activePage === numPages ? 'disabled' : ''}`}\n        />\n      </div>\n    )\n  }\n\n  const renderSearchBar = () => {\n    return (\n      <div className='playlists-search'>\n        <FeatherIcon \n          width={16} \n          height={16} \n          icon=\"search\" \n        />\n        Search\n      </div>\n    )\n  }\n\n  const renderSortDropdown = () => {\n    return (\n      <div className='playlists-sort'>\n        Sort\n        <FeatherIcon \n          width={16} \n          height={16} \n          icon=\"chevron-down\" \n        />\n      </div>\n    )\n  }\n\n  const renderPlaylistPage = () => {\n    const startNumber = (activePage - 1) * numPerPage\n    const playlistsToShow = playlists.slice(startNumber, startNumber + numPerPage);\n\n    return (\n      <React.Fragment>\n        {playlistsToShow.map((playlist, index) => {\n          return <div className={`playlist-row ${ index % 2 === 1 ? 'odd' : '' }`}>\n            <div className='playlist-img-name'>\n              <img \n                className='playlist-image' \n                width={60} \n                height={60}\n                src={playlist.images.length > 0 ? playlist.images[0].url : ''}\n                alt={`\"${playlist.name}\" Cover`} \n                onError={( { currentTarget } ) =>{\n                  currentTarget.onerror = null;\n                  currentTarget.src = '/assets/generic-image.png'\n              }} \n              />\n              <span className='playlist-name'>{playlist.name}</span>\n            </div>\n            <div className=\"edit-button\" onClick={() => updateSelectedPlaylist(playlist.id, api)}>\n              <FeatherIcon \n                icon='edit'\n                width={16}\n                height={16}\n              />\n              Edit\n            </div>\n          </div>\n        })}\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div className='playlists-container'>\n      <span className='playlists-header'>{title}</span>\n      <div className='playlists-nav-row'>\n        {!loading && renderPaginationButton()}\n        {/*renderSearchBar()}\n        {renderSortDropdown()*/}\n      </div>\n      <div className='card-style playlists-card'>\n        {!loading && renderPlaylistPage()}\n        {loading && <div className='playlist-row'>Loading...</div>}\n      </div>\n    </div>\n  );\n}\n\nexport const mapStateToProps = (state) => {\n  return {\n    api: state.api.spotifyApi,\n    playlists: state.playlist.editablePlaylists\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    loadEditablePlaylists: (userId, spotifyApi) =>\n      dispatch(loadUsersEditablePlaylists(userId, spotifyApi)),\n    updateSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi)),\n    setUserIdInRedux: (userId) => {\n        dispatch(setUserId(userId))\n      }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPlaylists);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport './TopArtists.css'\n\nconst TopArtists = ({ api }) => {\n\n  const [topArtists4Weeks, setTopArtists4Weeks] = useState([])\n  const [topArtists6Months, setTopArtists6Months] = useState([])\n  const [topArtistsAllTime, setTopArtistsAllTime] = useState([])\n  const [activeView, setActiveView] = useState('short_term')\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    api.getMyTopArtists({ limit: 5, time_range: 'short_term' }).then(\n      data => {\n          setTopArtists4Weeks(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n\n    api.getMyTopArtists({ limit: 5, time_range: 'medium_term' }).then(\n      data => {\n          setTopArtists6Months(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n\n    api.getMyTopArtists({ limit: 5, time_range: 'long_term' }).then(\n      data => {\n          setTopArtistsAllTime(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n  }, [api])\n\n  const renderTopArtists = () => {\n\n    const renderArtist = (artist) => {\n      return (\n        <div className=\"artist-row\">\n          <img className='top-artist-image' width={40} height={40} src={artist.images.length > 0 ? artist.images[0].url : ''} />\n          <span className=\"artist-name\">{artist.name}</span>\n        </div>\n      )\n    }\n\n    if (error) {\n      return 'Error loading top artists.'\n    } else if (!topArtists4Weeks || !topArtists6Months || !topArtistsAllTime) {\n      return 'Loading...'\n    } else if (activeView === 'short_term') {\n      return (\n        <React.Fragment>\n          {topArtists4Weeks.map((artist) => {\n            return renderArtist(artist)\n          })}\n        </React.Fragment>\n      )\n    } else if (activeView === 'medium_term') {\n      return (\n        <React.Fragment>\n          {topArtists6Months.map((artist) => {\n            return renderArtist(artist)\n          })}\n        </React.Fragment>\n      )\n    } else if (activeView === 'long_term') {\n      return (\n        <React.Fragment>\n          {topArtistsAllTime.map((artist) => {\n            return renderArtist(artist)\n          })}\n        </React.Fragment>\n      )\n    }\n  }\n\n  return (\n    <div className='top-artists-container'>\n      <span className=\"top-artists-header\">Top Artists</span>\n      <div className='top-artists-button-row'>\n        <div \n          className={`top-artists-button ${activeView === 'short_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('short_term') }}\n        >\n          4 Weeks\n        </div>\n        <div \n          className={`top-artists-button ${activeView === 'medium_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('medium_term') }}\n        >\n          6 Months\n        </div>\n        <div \n          className={`top-artists-button ${activeView === 'long_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('long_term') }}\n        >\n          All Time\n        </div>\n      </div>\n      <div className='card-style top-artists-card'>\n        {renderTopArtists()}\n      </div>\n    </div>\n  )\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nexport default connect(mapStateToProps)(TopArtists);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport './TopTracks.css'\n\nconst TopTracks = ({ api }) => {\n\n  const [topTracks4Weeks, setTopTracks4Weeks] = useState([])\n  const [topTracks6Months, setTopTracks6Months] = useState([])\n  const [topTracksAllTime, setTopTracksAllTime] = useState([])\n  const [activeView, setActiveView] = useState('short_term')\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    api.getMyTopTracks({ limit: 5, time_range: 'short_term' }).then(\n      data => {\n        setTopTracks4Weeks(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n\n    api.getMyTopTracks({ limit: 5, time_range: 'medium_term' }).then(\n      data => {\n        setTopTracks6Months(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n\n    api.getMyTopTracks({ limit: 5, time_range: 'long_term' }).then(\n      data => {\n        setTopTracksAllTime(data.body.items)\n      },\n      error => {\n        setError(error)\n      }\n    );\n  }, [api])\n\n  const renderTopTracks = () => {\n\n    const renderTrack = (track) => {\n      return (\n        <div className=\"top-track-row\">\n          <img className=\"top-track-image\" width={40} height={40} src={track.album.images.length > 0 ? track.album.images[0].url : ''} />\n          <span className=\"top-track-name\">{track.name}</span>\n        </div>\n      )\n    }\n\n    if (error) {\n      return 'Error loading top tracks.'\n    } else if (!topTracks4Weeks || !topTracks6Months || !topTracksAllTime) {\n      return 'Loading...'\n    } else if (activeView === 'short_term') {\n      return (\n        <React.Fragment>\n          {topTracks4Weeks.map((track) => {\n            return renderTrack(track)\n          })}\n        </React.Fragment>\n      )\n    } else if (activeView === 'medium_term') {\n      return (\n        <React.Fragment>\n          {topTracks6Months.map((track) => {\n            return renderTrack(track)\n          })}\n        </React.Fragment>\n      )\n    } else if (activeView === 'long_term') {\n      return (\n        <React.Fragment>\n          {topTracksAllTime.map((track) => {\n            return renderTrack(track)\n          })}\n        </React.Fragment>\n      )\n    }\n  }\n\n  return (\n    <div className='top-tracks-container'>\n      <span className=\"top-tracks-header\">Top Tracks</span>\n      <div className='top-tracks-button-row'>\n        <div\n          className={`top-tracks-button ${activeView === 'short_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('short_term') }}\n        >\n          4 Weeks\n        </div>\n        <div\n          className={`top-tracks-button ${activeView === 'medium_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('medium_term') }}\n        >\n          6 Months\n        </div>\n        <div\n          className={`top-tracks-button ${activeView === 'long_term' ? 'active' : ''}`}\n          onClick={() => { setActiveView('long_term') }}\n        >\n          All Time\n        </div>\n      </div>\n      <div className='card-style top-tracks-card'>\n        {renderTopTracks()}\n      </div>\n    </div>\n  )\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nexport default connect(mapStateToProps)(TopTracks);\n","import React, { Component } from \"react\";\nimport \"./profile.css\";\nimport MyPlaylists from \"./subcomponents/personal-playlists/PersonalPlaylists\";\nimport TopArtists from \"./subcomponents/TopArtists/TopArtists\";\nimport TopTracks from \"./subcomponents/TopTracks/TopTracks\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../common/constants\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { setUserId } from \"../../redux/actions/apiActions\";\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profile: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.spotifyApi.getMe().then(\n      data => {\n        this.setState({ profile: deepCamelCaseKeys(data.body) });\n      },\n      error => {\n        this.setState({ error: deepCamelCaseKeys(error) });\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  render() {\n    let { profile } = this.state;\n\n    if (profile) {\n      return (\n        <div className=\"profile-wrapper\">\n          <span className='profile-header'>My Profile</span>\n          <Row>\n            <Col xs={7}>\n              <MyPlaylists title=\"My Playlists\" userId={profile.id} />\n            </Col>\n            <Col xs={5} className=\"top-tracks-artists-col\">\n              <TopArtists />\n              <TopTracks />\n            </Col>\n          </Row>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport default connect(mapStateToProps)(Profile);\n","import React, { Component } from \"react\";\n\nexport default class Spacer extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: `${\n            this.props.percentage\n              ? this.props.percentage + \"vh\"\n              : this.props.pixels + \"px\"\n          }`\n        }}\n      ></div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Table, Button, Image } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport autoBind from \"react-autobind\";\nimport { setSelectedPlaylist } from \"../../../../redux/actions/playlistActions\";\nimport FeatherIcon from 'feather-icons-react';\n\nimport './Tracklist.css'\n\nclass TrackTable extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  /**\n   * Handles playling a single track on the user's currently active spotify device.\n   * @param {string} spotifyTrackId The ID of the spotify track that should be played.\n   */\n  handlePlayTrackOnSpotify(spotifyTrackId) {\n    return () => {\n      let { api, playlistId, tracksInPlaylist } = this.props;\n\n      if (tracksInPlaylist) {\n        api\n          .play({\n            context_uri: `spotify:playlist:${playlistId}`,\n            offset: { uri: `spotify:track:${spotifyTrackId}` },\n          })\n          .then(\n            (response) => {\n              //TODO: Handle response data and store currently playing.\n            },\n            (error) => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      } else {\n        api\n          .play({\n            uris: [`spotify:track:${spotifyTrackId}`],\n          })\n          .then(\n            (response) => {\n              //TODO: Handle response data and store currently playing.\n            },\n            (error) => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      }\n    };\n  }\n\n  /**\n   * Handles adding a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be added.\n   */\n  handleAddTrackToPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api } = this.props;\n\n      api\n        .addTracksToPlaylist(playlistId, [`spotify:track:${spotifyTrackId}`])\n        .then(\n          async (response) => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          (error) => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  /**\n   * Handles removing a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be removed.\n   */\n  handleRemoveTrackFromPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api, setSelectedPlaylist } = this.props;\n\n      api\n        .removeTracksFromPlaylist(playlistId, [\n          { uri: `spotify:track:${spotifyTrackId}` },\n        ])\n        .then(\n          async (response) => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          (error) => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  renderTrackRow = (track, index) => {\n    return (\n      <div className={`track-row ${index % 2 === 1 ? 'odd' : ''}`}>\n        <div className=\"track-row-image-title\">\n          {track.album.images[0] && (\n            <Image\n              width={60}\n              height={60}\n              src={track.album.images[0].url}\n              className=\"track-table-image\"\n            />\n          )}\n          <span className=\"track-name\">{track.name}</span>\n        </div>\n        <div className=\"track-row-actions\">\n          <div\n            className=\"play-button\"\n            onClick={this.handlePlayTrackOnSpotify(track.id)}\n          >\n            <FeatherIcon icon=\"play\" width={16} height={16} />\n          </div>\n          {this.props.tracksInPlaylist ? (\n            <div\n              className=\"trash-button\"\n              onClick={this.handleRemoveTrackFromPlaylist(track.id)}\n            >\n              <FeatherIcon icon=\"trash-2\" width={16} height={16} />\n            </div>\n          ) : (\n            <div\n              className=\"plus-button\"\n              onClick={this.handleAddTrackToPlaylist(track.id)}\n            >\n              <FeatherIcon icon=\"plus\" width={16} height={16} />\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.tracks.map((track, index) => {\n          return this.renderTrackRow(track, index)\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    api: state.api.spotifyApi,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackTable);\n","import React, { Component } from \"react\";\nimport \"../playlist-builder.css\";\nimport { Image, Col, Row, Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport {\n  isBelowSmallBreakpoint,\n  deepCamelCaseKeys,\n} from \"../../../common/constants\";\n\nexport default class PlaylistInfo extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n\n    autoBind(this);\n  }\n\n  render() {\n    let { playlist } = this.props;\n\n    return (\n      <div id=\"playlist-info-wrapper\" className=\"p-2\">\n        <Row>\n          <Col className=\"playlist-image-wrapper\" xs={12} sm={6}>\n            {playlist.images[0] ? (\n              <Image\n                src={playlist.images[0].url}\n                className=\"playlist-info-image\"\n              />\n            ) : null}\n          </Col>\n          <Col\n            className=\"playlist-title-desc-wrapper break-long-words p-3\"\n            xs={12}\n            sm={6}\n          >\n            <h1 className=\"large-header-font\">\n              {playlist.name}\n            </h1>\n            <p className=\"paragraph-font mb-0\">{playlist.description || \"No description provided.\"}</p>\n            <p className=\"paragraph-font\">\n              {playlist.followers.total}{\" \"}\n              {playlist.followers.total == 1 ? \"follower\" : \"followers\"}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  async generateHypeCurvePlaylist() {\n    let { api, playlist } = this.props;\n\n    let trackIds = [];\n\n    playlist.tracks.forEach((playlistTrack) => {\n      trackIds.push(playlistTrack.track.id);\n    });\n\n    let haveToLoop = trackIds.length > 100;\n    let trackStatistics = [];\n\n    if (trackIds.length !== 0) {\n      await api\n        .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n        .then((data) => {\n          let response = deepCamelCaseKeys(data.body);\n\n          if (response.audioFeatures) {\n          }\n          trackStatistics = trackStatistics.concat(response.audioFeatures);\n        });\n\n      if (haveToLoop) {\n        let numOfStatisticsReceived = 100;\n\n        while (haveToLoop) {\n          await api\n            .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n            .then((data) => {\n              let response = deepCamelCaseKeys(data.body);\n              trackStatistics = trackStatistics.concat(response.audioFeatures);\n              numOfStatisticsReceived += response.audioFeatures.length;\n            });\n\n          if (numOfStatisticsReceived === trackIds.length) {\n            haveToLoop = false;\n          }\n        }\n      }\n\n      var hypeScores = trackStatistics.map((trackStatistic) => {\n        let {\n          danceability,\n          energy,\n          valence,\n          tempo,\n          popularity,\n          id,\n        } = trackStatistic;\n        return {\n          trackUri: \"spotify:track:\" + id,\n          score: danceability * energy * valence * tempo * popularity,\n        };\n      });\n\n      // here we want to sort the hype scores, iterate through them and add every other element to two arrays.\n      // then we reverse one of the arrays and add it to the end, and we have a hype curve.\n      let sortedHypeScores = hypeScores.sort((a, b) => a.score - b.score);\n\n      var ascendingScores = [];\n      var descendingScores = [];\n\n      sortedHypeScores.forEach((score, index) => {\n        if (index % 2 == 0) {\n          ascendingScores.push(score);\n        } else {\n          descendingScores.push(score);\n        }\n      });\n\n      // Actually make descending scores descending\n      descendingScores.reverse();\n\n      let curvedScores = ascendingScores.concat(descendingScores);\n      let userId = \"\";\n      await api.getMe().then((response) => {\n        userId = response.body.id;\n      });\n\n      var playlistId = \"\";\n      await api\n        .createPlaylist(userId, playlist.name + \" - Hype Curve\")\n        .then((response) => {\n          playlistId = response.body.id;\n        });\n\n      await api.addTracksToPlaylist(\n        playlistId,\n        curvedScores.map((score) => score.trackUri)\n      );\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { isBelowSmallBreakpoint } from \"../../../../common/constants\";\nimport TrackTable from \"./TrackTable\";\nimport { Pagination } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport FeatherIcon from 'feather-icons-react'\n\nimport './Tracklist.css'\n\nclass PlaylistTracklist extends Component {\n  numberPerPage = 8;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: 1,\n      numPages: Math.ceil(props.tracks.length / this.numberPerPage)\n    };\n\n    autoBind(this);\n  }\n\n  /**\n   * Returns an event handler that changes the current page to the\n   * page with the given index.\n   * @param {number} newPageIndex The index of the page to change to.\n   */\n  changeCurrentPageHandler(newPageIndex) {\n    return () => {\n      this.setState({ currentPage: newPageIndex });\n    };\n  }\n\n  renderPaginationButton = () => {\n    return (\n      <div className='tracklist-pagination'>\n        <FeatherIcon\n          width={16}\n          height={16}\n          icon=\"chevron-left\"\n          onClick={this.state.currentPage === 1 ? null : this.changeCurrentPageHandler(this.state.currentPage - 1)}\n          className={`tracklist-pagination-arrow ${this.state.currentPage === 1 ? 'disabled' : ''}`}\n        />\n        Page {this.state.currentPage} / {this.state.numPages}\n        <FeatherIcon\n          width={16}\n          height={16}\n          icon=\"chevron-right\"\n          onClick={this.state.currentPage === this.state.numPages ? null : this.changeCurrentPageHandler(this.state.currentPage + 1)}\n          className={`tracklist-pagination-arrow ${this.state.currentPage === this.state.numPages ? 'disabled' : ''}`}\n        />\n      </div>\n    )\n  }\n\n  renderSearchBar = () => {\n    return (\n      <div className='tracklist-search'>\n        <FeatherIcon\n          width={16}\n          height={16}\n          icon=\"search\"\n        />\n        Search\n      </div>\n    )\n  }\n\n  renderSortDropdown = () => {\n    return (\n      <div className='tracklist-sort'>\n        Sort\n        <FeatherIcon\n          width={16}\n          height={16}\n          icon=\"chevron-down\"\n        />\n      </div>\n    )\n  }\n\n\n  render() {\n    let { currentPage } = this.state;\n    let { tracks } = this.props;\n\n    // Copy the tracks and splice the current page from the copy.\n    let tracksCopy = tracks.concat([]);\n\n    const startNumber = (currentPage - 1) * this.numberPerPage\n    const playlistsToShow = tracksCopy.slice(startNumber, startNumber + this.numberPerPage).map(playlistTrack => playlistTrack.track);\n\n    return (\n      <div className=\"tracklist-container\">\n        <span className='tracklist-header'>Track List</span>\n        <div className=\"tracklist-button-row\">\n          {this.renderPaginationButton()}\n          {/*this.renderSearchBar()}\n          {this.renderSortDropdown()*/}\n        </div>\n        <div className=\"card-style tracklist-card\">\n          <TrackTable\n            tracks={playlistsToShow}\n            tracksInPlaylist={true}\n            playlistId={this.props.playlistId}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistTracklist;\n","import React, { Component } from \"react\";\nimport TrackTable from \"../Tracklist/TrackTable\";\nimport { connect } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport Slider from \"rc-slider\";\nimport { setSelectedPlaylist } from \"../../../../redux/actions/playlistActions\";\nimport FeatherIcon from 'feather-icons-react'\n\nimport './Recommendations.css'\n\nclass Recommendations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeView: \"input\",\n      recommendedTracks: [],\n      selectedArtistSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\",\n      },\n      selectedTrackSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\",\n      },\n      targetValence: 0.5,\n      targetEnergy: 0.5,\n      targetDanceability: 0.5,\n      targetBPM: 100,\n      targetPopularity: 50,\n      error: null,\n    };\n\n    autoBind(this);\n\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  componentDidMount() {\n    this.handleRecommendationGeneration();\n  }\n\n  /**\n   * A method to update the selected playlist. It calls the redux action to load a selected playlist with this playlist's id.\n   */\n  updateSelectedPlaylist() {\n    let { api, playlistId, setSelectedPlaylist } = this.props;\n    setSelectedPlaylist(playlistId, api);\n  }\n\n  /**\n   * Determines whether or not we should generate recommendations.\n   * Checks that there is at least one seed selected, if not it sets an\n   * error in the state.\n   *\n   * @returns void\n   */\n  handleRecommendationGeneration() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let atLeastOneSeedSelected = false;\n\n    Object.keys(selectedArtistSeeds).forEach((index) => {\n      if (selectedArtistSeeds[index] !== \"\") {\n        atLeastOneSeedSelected = true;\n      }\n    });\n\n    if (!atLeastOneSeedSelected) {\n      Object.keys(selectedTrackSeeds).forEach((index) => {\n        if (selectedTrackSeeds[index] !== \"\") {\n          atLeastOneSeedSelected = true;\n        }\n      });\n    }\n\n    if (atLeastOneSeedSelected) {\n      this.updateRecommendations();\n    } else {\n      this.setState({\n        error: \"You must choose at least one seed for recommendations.\",\n      });\n    }\n  }\n\n  /**\n   * Updates the recommendations for the playlist with the currently\n   * selected values and seeds and updates the table.\n   *\n   * @returns void\n   */\n  updateRecommendations() {\n    let { api } = this.props;\n    let {\n      selectedArtistSeeds,\n      selectedTrackSeeds,\n      targetValence,\n      targetEnergy,\n      targetDanceability,\n      targetBPM,\n      targetPopularity,\n    } = this.state;\n\n    let seedArtistIds = [];\n    Object.keys(selectedArtistSeeds).forEach((seedIndex) => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        seedArtistIds.push(selectedArtistSeeds[seedIndex]);\n      }\n    });\n\n    let seedTrackIds = [];\n    Object.keys(selectedTrackSeeds).forEach((seedIndex) => {\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        seedTrackIds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    let query = {\n      limit: 15,\n      target_bpm: targetBPM,\n      target_valence: targetValence,\n      target_energy: targetEnergy,\n      target_danceability: targetDanceability,\n      target_popularity: targetPopularity,\n      seed_artists: seedArtistIds,\n      seed_tracks: seedTrackIds,\n    };\n\n    api.getRecommendations(query).then(\n      (data) => {\n        this.setState({ recommendedTracks: data.body.tracks, error: null, activeView: 'songs' });\n      },\n      (error) => {\n        this.setState({ error: error.message, activeView: 'songs' });\n      }\n    );\n  }\n\n  /**\n   * Method to see if all the seeds for recommendations are filled since\n   * Spotify only allows 5 seeds of any type.\n   *\n   * @returns a boolean representing whether or not we have the max amounts of seeds.\n   */\n  numberOfSeedsFull() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let artistSeeds = [];\n    let trackSeeds = [];\n\n    [0, 1, 2].forEach((seedIndex) => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        artistSeeds.push(selectedArtistSeeds[seedIndex]);\n      }\n\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        trackSeeds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    return artistSeeds.length + trackSeeds.length >= 5;\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed artist to change.\n   */\n  handleAddSeedArtist(index) {\n    return (event) => {\n      this.setState({\n        selectedArtistSeeds: {\n          ...this.state.selectedArtistSeeds,\n          [index]: event.target.value,\n        },\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed artists.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedArtistsDropdown() {\n    let { playlistTracks } = this.props;\n\n    let artists = {};\n\n    playlistTracks.forEach((playlistTrack) => {\n      playlistTrack.track.artists.forEach((artist) => {\n        artists[artist.id] = artist.name;\n      });\n    });\n\n    let artistIdArray = Object.keys(artists);\n\n    return (\n      <div className=\"input-container\">\n        <span className=\"input-label\">Similar Artists (up to 3)</span>\n\n        <div className='dropdowns-container'>\n          {[1, 2, 3].map((seedNumber) => {\n            let { selectedArtistSeeds } = this.state;\n\n            return (\n              <div className=\"dropdown-container\">\n                <select\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedArtist(seedNumber - 1)}\n                  disabled={\n                    selectedArtistSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                  className=\"similar-dropdown\"\n                >\n                  <option value=\"\">None</option>\n                  {artistIdArray.map((artistId) => {\n                    return (\n                      <option value={artistId}>{artists[artistId]}</option>\n                    );\n                  })}\n                </select>\n                <FeatherIcon className='dropdown-arrow' icon=\"chevron-down\" width={16} height={16} />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed track to change.\n   */\n  handleAddSeedTrack(index) {\n    return (event) => {\n      this.setState({\n        selectedTrackSeeds: {\n          ...this.state.selectedTrackSeeds,\n          [index]: event.target.value,\n        },\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedTracksDropdown() {\n    let { playlistTracks } = this.props;\n\n    let tracks = {};\n\n    playlistTracks.forEach((playlistTrack) => {\n      let track = playlistTrack.track;\n\n      tracks[track.id] = track.name;\n    });\n\n    let trackIdArray = Object.keys(tracks);\n\n    return (\n      <div className=\"input-container\">\n        <span className=\"input-label\">Similar Artists (up to 3)</span>\n        <div className=\"dropdowns-container\">\n          {[1, 2, 3].map((seedNumber) => {\n            let { selectedTrackSeeds } = this.state;\n\n            return (\n              <div className=\"dropdown-container\">\n                <select\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedTrack(seedNumber - 1)}\n                  disabled={\n                    selectedTrackSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                  className=\"similar-dropdown\"\n                >\n                  <option value=\"\">None</option>\n                  {trackIdArray.map((trackId) => {\n                    return (\n                      <option value={trackId}>{tracks[trackId]}</option>\n                    );\n                  })}\n                </select>\n                <FeatherIcon className='dropdown-arrow' icon=\"chevron-down\" width={16} height={16} />\n              </div>\n            );\n          })}\n        </div>\n     </div>\n    );\n  }\n\n  /**\n   * Renders the sliders for selecting target audio features for the\n   * recommended tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderAudioFeatureSliders() {\n    return (\n      <div className=\"audio-feature-input\">\n        <div className='input-container'>\n          <span className=\"input-label\">Target Danceability</span>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetDanceability * 100}\n            onChange={(value) =>\n              this.setState({ targetDanceability: value / 100 })\n            }\n            className=\"audio-slider\"\n          />\n        </div>\n        <div className='input-container'>\n          <span className=\"input-label\">Target Energy</span>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetEnergy * 100}\n            onChange={(value) => this.setState({ targetEnergy: value / 100 })}\n            className=\"audio-slider\"\n          />\n        </div>\n\n        <div className='input-container'>\n          <span className=\"input-label\">Target Valence</span>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetValence * 100}\n            onChange={(value) => this.setState({ targetValence: value / 100 })}\n            className=\"audio-slider\"\n          />\n        </div>\n\n        <div className='input-container'>\n          <span className=\"input-label\">Target Tempo</span>\n          <Slider\n            min={0}\n            max={250}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetBPM}\n            onChange={(value) => this.setState({ targetBPM: value })}\n            className=\"audio-slider\"\n          />\n        </div>\n\n        <div className='input-container'>\n          <span className=\"input-label\">Target Popularity</span>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetPopularity}\n            onChange={(value) => this.setState({ targetPopularity: value })}\n            className=\"audio-slider\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    let { error } = this.state;\n\n    return (\n      <div className=\"recommendations-container\">\n        <span className=\"recommendations-header\">Generate Recommendations</span>\n        <div className=\"recommendations-tab-row\">\n          <div \n            className={`recommendations-tab ${this.state.activeView === 'input' ? 'active' : ''}`}\n            onClick={() => {this.setState({ activeView: 'input' })}}\n          >\n            Recommendations Input\n          </div>\n          <div \n            className={`recommendations-tab ${this.state.activeView === 'songs' ? 'active' : ''}`}\n            onClick={() => {this.setState({ activeView: 'songs' })}}\n          >\n            Recommended Songs\n          </div>\n        </div>\n        {this.state.activeView === 'input' && (\n          <div className=\"recommendations-main-card card-style\">\n            {this.renderSeedTracksDropdown()}\n            {this.renderSeedArtistsDropdown()}\n            {this.renderAudioFeatureSliders()}\n            <div className=\"recommendations-button\" onClick={this.handleRecommendationGeneration}>\n              Generate Recommendations\n            </div>\n          </div>\n        )}\n        {this.state.activeView === 'songs' && (\n          <div className=\"card-style\">\n            {error && (\n              <div className=\"text-center mt-2\">\n                <h5 className=\"p-3 lead text-danger\">\n                  <i className=\"fa fa-exclamation-triangle\"></i> {error}\n                </h5>\n              </div>\n            )}\n            {!error && (\n                <TrackTable\n                  playlistId={this.props.playlistId}\n                  tracks={this.state.recommendedTracks}\n                  updateCallback={this.updateSelectedPlaylist}\n                />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n/**\n * Maps the spotify api to the props of the recommendations component so that\n * we can use it to find recommendations.\n *\n * @param {*} state The incoming redux state\n */\nconst mapStateToProps = (state) => {\n  return {\n    api: state.api.spotifyApi,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recommendations);\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { deepCamelCaseKeys, msToHM } from '../../../../common/constants';\n\nimport './PlaylistStatistics.css'\n\nconst PlaylistStatistics = ({ playlist, api }) => {\n\n  const [loading, setLoading] = useState(true);\n  const [playlistStats, setPlaylistStats] = useState({})\n\n  const [activeView, setActiveView] = useState('song_information')\n\n  console.log(playlist)\n\n  /**\n   * Calculates the average music statistics from Spotify for this playlist.\n   */\n  const calculateAverageStatistics = useCallback(async () => {\n    let { tracks } = playlist\n    let statistics = {\n      tempo: null,\n      danceability: null,\n      valence: null,\n      energy: null,\n      durationMs: null,\n      popularity: null\n    };\n\n    let trackIds = [];\n\n    tracks.forEach(playlistTrack => {\n      trackIds.push(playlistTrack.track.id);\n      statistics.popularity =\n        statistics.popularity + playlistTrack.track.popularity;\n    });\n\n    let haveToLoop = trackIds.length > 100;\n\n    let trackStatistics = [];\n\n    if (trackIds.length !== 0) {\n      await api\n        .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n        .then(data => {\n          let response = deepCamelCaseKeys(data.body);\n\n          if (response.audioFeatures) {\n            trackStatistics = trackStatistics.concat(response.audioFeatures);\n          }\n        });\n\n      if (haveToLoop) {\n        let numOfStatisticsReceived = 100;\n\n        while (haveToLoop) {\n          let data = await api.getAudioFeaturesForTracks(trackIds.splice(0, 100))\n          let response = deepCamelCaseKeys(data.body);\n          trackStatistics = trackStatistics.concat(response.audioFeatures);\n          numOfStatisticsReceived += response.audioFeatures.length;\n\n          if (numOfStatisticsReceived === tracks.length) {\n            haveToLoop = false;\n          }\n        }\n      }\n\n      trackStatistics.forEach(trackStatistic => {\n        if (trackStatistic !== null) {\n          statistics.tempo = statistics.tempo + trackStatistic.tempo;\n          statistics.danceability =\n            statistics.danceability + trackStatistic.danceability;\n          statistics.valence = statistics.valence + trackStatistic.valence;\n          statistics.energy = statistics.energy + trackStatistic.energy;\n          statistics.durationMs =\n            statistics.durationMs + trackStatistic.durationMs;\n        }\n      });\n\n      setPlaylistStats({\n        tempo: statistics.tempo / tracks.length,\n        danceability: statistics.danceability / tracks.length,\n        valence: statistics.valence / tracks.length,\n        energy: statistics.energy / tracks.length,\n        durationMs: statistics.durationMs,\n        popularity: statistics.popularity / tracks.length\n      })\n      setLoading(false)\n    }\n  }, [api, playlist]);\n\n\n  const renderPercetangeBar = (percent) => {\n    return (\n      <div className='percentage-bar-container'>\n        <div className='percent-full' style={{ width: `${percent}%` }} />\n      </div>\n    )\n  }\n\n\n  const renderSongInformationView = () => {\n\n    return (\n      <React.Fragment>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Tempo</span>\n          <span className='playlist-stats-font'>{Math.round(playlistStats.tempo)} BPM</span>\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Energy</span>\n          {renderPercetangeBar(playlistStats.energy.toFixed(2) * 100)}\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Danceability</span>\n          {renderPercetangeBar(playlistStats.danceability.toFixed(2) * 100)}\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Valence</span>\n          {renderPercetangeBar(playlistStats.valence.toFixed(2) * 100)}\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Average Song Popularity</span>\n          {renderPercetangeBar(playlistStats.popularity.toFixed(0))}\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  const renderPlaylistInformationView = () => {\n    let duration = msToHM(Math.round(playlistStats.durationMs));\n\n    return (\n      <React.Fragment>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Owner</span>\n          <span className='playlist-stats-font'>{playlist.owner.display_name}</span>\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Duration</span>\n          <span className='playlist-stats-font'>\n            {duration.hours > 0 ? duration.hours + \" hours\" : \"\"}\n            {\" \"}\n            {duration.minutes > 0 ? duration.minutes + \" minutes\" : \"\"}\n          </span>\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Followers</span>\n          <span className='playlist-stats-font'>{playlist.followers.total} Followers</span>\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Visibility</span>\n          <span className='playlist-stats-font'>{playlist.public ? 'Public' : 'Private'}</span>\n        </div>\n        <div className='playlist-stats-row'>\n          <span className='playlist-stats-label'>Collaborative</span>\n          <span className='playlist-stats-font'>{playlist.collaborative ? 'Yes' : 'No'}</span>\n        </div>\n      </React.Fragment>\n    )\n\n  }\n\n  useEffect(() => {\n    calculateAverageStatistics()\n  }, [calculateAverageStatistics])\n\n\n  if (loading) {\n    return 'Loading...'\n  }\n\n  console.log(playlistStats)\n\n  return (\n    <div className='playlist-stats-container'>\n      <span className='playlist-stats-header'>Playlist Statistics</span>\n      <div className='playlist-stats-button-row'>\n        <div\n          className={`playlist-stats-button ${activeView === 'song_information' ? 'active' : ''}`}\n          onClick={() => { setActiveView('song_information') }}\n        >\n          Song Information\n        </div>\n        <div\n          className={`playlist-stats-button ${activeView === 'playlist_information' ? 'active' : ''}`}\n          onClick={() => { setActiveView('playlist_information') }}\n        >\n          Playlist Information\n        </div>\n      </div>\n      <div className='playlist-stats-content card-style'>\n        {activeView === 'song_information' ? renderSongInformationView() : renderPlaylistInformationView()}\n      </div>\n    </div>\n  )\n}\n\nexport default PlaylistStatistics;","import React, { Component } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Spacer from \"../../common/components/Spacer\";\nimport PlaylistInfo from \"./subcomponents/PlaylistInfo\";\nimport \"./playlist-builder.css\";\nimport TrackTable from \"./subcomponents/Tracklist/TrackTable\";\nimport PlaylistTracklist from \"./subcomponents/Tracklist/PlaylistTracklist\";\nimport Recommendations from \"./subcomponents/Recommendations/Recommendations\";\nimport MyPlaylists from \"../profile/subcomponents/personal-playlists/PersonalPlaylists\";\nimport { setUserId } from \"../../redux/actions/apiActions\";\nimport { deepCamelCaseKeys } from \"../../common/constants\";\n\nimport FeatherIcon from 'feather-icons-react'\nimport PlaylistStatistics from \"./subcomponents/PlaylistStatistics/PlaylistStatistics\";\n\nclass PlaylistBuilder extends Component {\n  render() {\n    let { selectedPlaylist, api, userId } = this.props;\n\n    if (!selectedPlaylist) {\n      return (\n        <div id=\"playlist-builder-wrapper\">\n          <span className='edit-playlist-header'>Edit Playlist</span>\n          <MyPlaylists title=\"Select a playlist to edit\" userId={userId} />\n        </div>\n      );\n    }\n\n    return (\n      <div id=\"playlist-builder-wrapper\">\n        <span className='edit-playlist-header'>Edit Playlist</span>\n        <div className=\"playlist-info-card card-style\">\n          <img \n            width={300} \n            height={300} \n            src={selectedPlaylist.images.length > 0 ? selectedPlaylist.images[0].url : ''}\n            alt={`\"${selectedPlaylist.name}\" Cover`} \n            onError={( { currentTarget } ) =>{\n              currentTarget.onerror = null;\n              currentTarget.src = '/assets/generic-image.png'\n          }} \n            />\n          <div className=\"playlist-info-card-inner\">\n            <div className=\"playlist-info-card-name-desc\">\n              <span className=\"playlist-info-card-name\">{selectedPlaylist.name}</span>\n              <span className=\"playlist-info-card-desc\">{selectedPlaylist.description || 'No description provided.'}</span>\n            </div>\n            {/*<div className=\"playlist-info-card-button-row\">\n              <div className=\"edit-button\" onClick={() => { }}>\n                <FeatherIcon\n                  icon='edit'\n                  width={16}\n                  height={16}\n                />\n                Edit Title / Description\n              </div>\n              <span className=\"spotify-link\">\n                View on Spotify\n                <FeatherIcon\n                  icon=\"external-link\"\n                  height={16}\n                  width={16}\n                />\n              </span>\n        </div>*/}\n          </div>\n        </div>\n\n        <Row>\n          <Col xs={7}>\n            <PlaylistTracklist\n              tracks={selectedPlaylist.tracks}\n              playlistId={selectedPlaylist.id}\n            />\n          </Col>\n          <Col xs={5}>\n            <PlaylistStatistics playlist={selectedPlaylist} api={api} />\n          </Col>\n        </Row>\n\n        <Recommendations\n          playlistTracks={selectedPlaylist.tracks}\n          playlistId={selectedPlaylist.id}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api ? state.api.spotifyApi : null,\n    selectedPlaylist: state.playlist ? state.playlist.selectedPlaylist : null,\n    userId: state.api ? state.api.userId : null\n  };\n};\n\nexport default connect(mapStateToProps)(PlaylistBuilder);\n","import React, { Component } from 'react'\nimport \"./likert.css\"\n\nexport default class LikertScaleInput extends Component {\n  render() {\n    return (\n      <div>\n        <ul className='likert'>\n          <li>\n            <input type=\"radio\" name={`question-${this.props.questionNumber}--likert`} value=\"0\" onInput={this.props.updateQuestionChoice}/>\n            <label>Strongly disagree</label>\n          </li>\n          <li>\n            <input type=\"radio\" name={`question-${this.props.questionNumber}--likert`} value=\"1\" onInput={this.props.updateQuestionChoice}/>\n          </li>\n          <li>\n            <input type=\"radio\" name={`question-${this.props.questionNumber}--likert`} value=\"2\" onInput={this.props.updateQuestionChoice}/>\n            <label>Neutral</label>\n          </li>\n          <li>\n            <input type=\"radio\" name={`question-${this.props.questionNumber}--likert`} value=\"3\" onInput={this.props.updateQuestionChoice}/>\n          </li>\n          <li>\n            <input type=\"radio\" name={`question-${this.props.questionNumber}--likert`} value=\"4\" onInput={this.props.updateQuestionChoice} />\n            <label>Strongly agree</label>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport LikertScaleInput from './LikertScaleInput'\n\nexport default class Question extends Component {\n  constructor(props) {\n    super(props);\n\n\n  }\n\n\n  updateQuestionResult(event) {\n    let value = Number(event.target.value)\n    this.props.updateQuestionResult(this.props.index, value)\n  }\n\n\n  render() {\n    return (\n      <div>\n        <p className=\"text-center\"><strong>{this.props.text}</strong></p>\n        <LikertScaleInput questionNumber={this.props.index} updateQuestionChoice={this.updateQuestionResult.bind(this)} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Button, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport Question from './subcomponents/Question'\nimport {REFLECTIVE_AND_COMPLEX_GENRES, INTENSE_AND_REBELLIOUS_GENRES, UPBEAT_AND_CONVENTIONAL_GENRES, ENERGETIC_AND_RHYTHMIC_GENRES} from './constants'\n\n\nlet questionCategories = {\n  INVOLVEMENT_LEVEL: \"involvement_level\",\n  COPING: \"coping\",\n  PERSONAL_IDENTITY: \"personal_identity\",\n  SOCIAL_IDENTITY: \"social_identity\",\n  MOOD_ENHANCEMENT: \"mood_enhancement\"\n}\n\n\n\n\n\nclass MutualMelodiesPreferenceQuiz extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: \"\",\n      preferenceCode: \"\",\n      questions: [\n        {\n          text: \"With music I feel less lonely when alone\",\n          category: questionCategories.COPING,\n        },\n        {\n          text: \"Music creates a good atmosphere when with others\",\n          category: questionCategories.MOOD_ENHANCEMENT,\n        },\n        {\n          text: \"I recognize myself in the lyrics of my favourite artists\",\n          category: questionCategories.PERSONAL_IDENTITY,\n        },\n        {\n          text: \"I influence my friends with my music taste\",\n          category: questionCategories.INVOLVEMENT_LEVEL,\n        },\n        {\n          text: \"My friends have the same music taste as I do\",\n          category: questionCategories.SOCIAL_IDENTITY,\n        },\n        {\n          text: \"Can’t live without music\",\n          category: questionCategories.INVOLVEMENT_LEVEL,\n        },\n        {\n          text: \"Artists are an example to me\",\n          category: questionCategories.PERSONAL_IDENTITY,\n        },\n        {\n          text: \"Music makes other things less boring\",\n          category: questionCategories.MOOD_ENHANCEMENT,\n        },\n        {\n          text: \"With music I can vent aggression\",\n          category: questionCategories.COPING,\n        },\n        {\n          text: \"I find it important that my friends listen to the same music\",\n          category: questionCategories.SOCIAL_IDENTITY,\n        },\n        {\n          text: \"Lyrics of my music often express how I feel\",\n          category: questionCategories.PERSONAL_IDENTITY,\n        },\n        {\n          text: \"Music helps me get through my life\",\n          category: questionCategories.COPING,\n        },\n        {\n          text: \"My favourite artists have ideas that appeal to me\",\n          category: questionCategories.PERSONAL_IDENTITY,\n        },\n        {\n          text: \"Music helps against boredom\",\n          category: questionCategories.MOOD_ENHANCEMENT,\n        },\n        {\n          text: \"Music helps me to relax and stop thinking about things\",\n          category: questionCategories.MOOD_ENHANCEMENT,\n        },\n        {\n          text: \"I am always looking for new music\",\n          category: questionCategories.INVOLVEMENT_LEVEL,\n        },\n        {\n          text: \"I can’t be friends with someone who dislikes my music\",\n          category: questionCategories.SOCIAL_IDENTITY,\n        },\n        {\n          text: \"I always play music when I feel sad\",\n          category: questionCategories.COPING,\n        },\n        {\n          text: \"I know more than peers about music\",\n          category: questionCategories.INVOLVEMENT_LEVEL,\n        },\n      ]\n    }\n\n    this.updateQuizQuestionResult = this.updateQuizQuestionResult.bind(this)\n  }\n\n\n  updateQuizQuestionResult(index, value) {\n    let questions = [...this.state.questions]\n    let newQuestion = {\n      ...this.state.questions[index],\n      value: value\n    }\n\n    questions[index] = newQuestion;\n\n    this.setState({questions})\n  }\n\n\n  async getMusicDimensionScores() {\n    let topArtists = await this.props.api.getMyTopArtists({limit: 50, time_range: \"long_term\" })\n    let dimensionScores = {\n      RC: 0,\n      IR: 0,\n      UC: 0,      \n      ER: 0 \n    }\n\n    topArtists.body.items.forEach((artist) => {\n      for (let i = 0; i < artist.genres.length; i++) {\n        let genre = artist.genres[i];\n\n        if (genre.indexOf(\"jazz\") !== -1 || genre.indexOf(\"blues\") !== -1 || genre.indexOf(\"classical\") !== -1 || \n            genre.indexOf(\"folk\") !== -1) {\n          dimensionScores.RC++;\n        } else if (genre.indexOf(\"rock\") !== -1 || genre.indexOf(\"alt\") !== -1 || genre.indexOf(\"metal\") !== -1) {\n          dimensionScores.IR++;\n        } else if (genre.indexOf(\"country\") !== -1 || genre.indexOf(\"soundtracks\") !== -1 || genre.indexOf(\"pop\") !== -1 || \n                   genre.indexOf(\"gospel\") !== -1) {\n          dimensionScores.UC++;\n        } else if (genre.indexOf(\"rap\") !== -1 || genre.indexOf(\"hip hop\") !== -1 || genre.indexOf(\"soul\") !== -1 || \n                   genre.indexOf(\"funk\") !== -1 || genre.indexOf(\"edm\") !== -1 || genre.indexOf(\"electronic\") !== -1 || \n                   genre.indexOf(\"dance\") !== -1 || genre.indexOf(\"house\") !== -1 || genre.indexOf(\"techno\") !== -1) {\n          dimensionScores.ER++;\n        }\n      }\n    })\n\n    let highestScoringKey = Object.keys(dimensionScores).reduce(function (prev, key) {\n      if (!prev) {\n        return key\n      } else if (dimensionScores[key] > dimensionScores[prev]) {\n        return key\n      } else {\n        return prev\n      }\n    }, null)\n\n    return {\n      highestDimension: highestScoringKey,\n      ...dimensionScores\n    }\n  }\n\n\n\n\n  async calculateMusicPreferenceCode() {\n\n    if (this.state.questions.some((question) => { return question.value == null })) {\n      this.setState({error: \"Must complete all the questions.\"})\n      return\n    } else {\n      this.setState({error: \"\"})\n    }\n\n\n    \n    let scoredMusicUseCases = this.getSortedMusicUseAverages()\n    let involvementLevelCode = this.getInvolvementLevelScore();\n\n    let genreDataScore = await this.getMusicDimensionScores()\n\n    this.setState({preferenceCode: `${involvementLevelCode}-${scoredMusicUseCases[0].code}${scoredMusicUseCases[1].code}-${genreDataScore.highestDimension}`})\n    window.scrollTo({top: 0, left: 0, behavior: \"smooth\"})\n    document.getElementById('code-explanation').classList.remove('d-none')\n  }\n\n\n  getInvolvementLevelScore() {\n    let involvementQuestions = this.state.questions.filter((question) => question.category == questionCategories.INVOLVEMENT_LEVEL)\n    let involvementAvg = (involvementQuestions.reduce((total, question) => { return total + question.value }, 0)) / involvementQuestions.length\n\n    if (involvementAvg < 1) {\n      return \"L\"\n    } else if (involvementAvg < 3) {\n      return \"M\"\n    } else {\n      return \"H\"\n    }\n  }\n\n  getSortedMusicUseAverages() {\n    let copingQuestions = this.state.questions.filter((question) => question.category == questionCategories.COPING)\n    let moodEnhancementQuestions = this.state.questions.filter((question) => question.category == questionCategories.MOOD_ENHANCEMENT)\n    let socialIdentityQuestions = this.state.questions.filter((question) => question.category == questionCategories.SOCIAL_IDENTITY)\n    let personalIdentityQuestions = this.state.questions.filter((question) => question.category == questionCategories.PERSONAL_IDENTITY)\n\n    let copingAvg = (copingQuestions.reduce((total, question) => { return total + question.value }, 0)) / copingQuestions.length\n    let moodEnhancementAvg = (moodEnhancementQuestions.reduce((total, question) => { return total + question.value }, 0)) / moodEnhancementQuestions.length\n    let socialIdentityAvg = (socialIdentityQuestions.reduce((total, question) => { return total + question.value }, 0)) / socialIdentityQuestions.length\n    let personalIdentityAvg = (personalIdentityQuestions.reduce((total, question) => { return total + question.value }, 0)) / personalIdentityQuestions.length\n\n    let musicUseAverages = [{ \n        \"code\": \"Co\",\n        \"category\": questionCategories.COPING, \n        \"avg\": copingAvg \n      }, {\n        \"code\": \"Me\",\n        \"category\": questionCategories.MOOD_ENHANCEMENT, \n        \"avg\": moodEnhancementAvg \n      }, {\n        \"code\": \"Si\",\n        \"category\": questionCategories.SOCIAL_IDENTITY, \n        \"avg\": socialIdentityAvg \n      }, {\n        \"code\": \"Pi\",\n        \"category\": questionCategories.PERSONAL_IDENTITY, \n        \"avg\": personalIdentityAvg \n      } ].sort((a, b) => { return b.avg - a.avg; })\n\n    return musicUseAverages\n  } \n\n\n  render() {\n    return (\n      <Col xs={12} className=\"mt-5\">\n\n      <div className=\"mb-5\">\n        <h3> Mutual Melodies Music Preference Quiz </h3>\n        <p>\n          This quiz is designed to give you an understanding of your music listening preference and the different components of it. \n          The quiz determines the kind of music you listen to using the data we get from your Spotify account, and the reasons for your music listening habits by using the answers to the questions below.\n          When completed, we return a code that represents the configuration of your music taste, and then you can find people with similar music listening preferences.\n        </p>\n\n      </div>\n\n      <div className=\"text-center my-5\">\n        <h1>{this.state.preferenceCode}</h1>\n      </div>\n\n      <div>\n        <ul id=\"code-explanation\" className=\"d-none\">\n          <li> \n            <p className=\"mb-0\"><strong>First Section: Involvement Level</strong></p>\n            <p >This first section measures how important music is to you and how involved you are. The options are H,M & L (High, Medium, & Low).</p>\n          </li>\n          <li> \n          <p className=\"mb-0\"><strong>Second Section: 2 Main Usages for Music Listening.</strong></p>\n          <p>This second section shows you your main uses for music, based on your quiz respones. The options are:</p>\n          <ul>\n            <li>\n              <p className=\"mb-0\"><strong>Coping (Co)</strong></p>\n              <p>You use music to manage and cope with your emotions, almost like a tool.</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Mood Enhancement (Me)</strong></p>\n              <p>Similar to coping, you use music as a tool to manage your moods while doing other things, like homework.</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Personal Identity (Pi)</strong></p>\n              <p>You use music to make an identity for yourself, and you see yourself in the music you listen to.</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Social Identity (Si)</strong></p>\n              <p>You use music to create your social identity among your peers.</p>\n            </li>\n          </ul>\n          </li>\n          <li> \n          <p className=\"mb-0\"><strong>Third Section: Most Prominent Music Dimension</strong></p>\n          <p>\n            This last section shows you the music dimension that your music falls into. \n            We use these dimensions, as they represent a few different genres that you may \n            listen to as opposed to a specific sone. The options are:\n          </p>\n          <ul>\n            <li>\n              <p className=\"mb-0\"><strong>Reflective and Complex (RC)</strong></p>\n              <p>This dimension includes genres like blues, jazz, classical, & folk music.</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Intense and Rebellious (IR)</strong></p>\n              <p>This dimension includes genres like rock, alternative, & heavy metal.</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Upbeat and Conventional (UC)</strong></p>\n              <p>This dimension includes genres like country, soundtracks, religious, & pop music</p>\n            </li>\n            <li>\n              <p className=\"mb-0\"><strong>Energetic and Rhythmic (ER)</strong></p>\n              <p>This dimension includes genres like rap/hip-hop, soul/funk, & electronic/dance music.</p>\n            </li>\n          </ul>\n          </li>\n        </ul>\n      </div>\n        \n      <div className=\"mt-5\">\n        {this.state.questions.map((question, index) => {\n          return <Question \n                    id={`question--${index}`} \n                    index={index} \n                    key={index} \n                    text={question.text} \n                    category={question.category} \n                    updateQuestionResult={this.updateQuizQuestionResult}\n                  />\n        })}\n      </div>\n       \n      <div className=\"d-flex mb-5\">\n      <Button\n          className=\"pn-primary-button\"\n          onClick={this.calculateMusicPreferenceCode.bind(this)}\n        >GENERATE PREFERENCE CODE</Button>\n          <h5 className=\"text-danger\">{this.state.error}</h5>\n      </div>\n          \n      </Col>\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api ? state.api.spotifyApi : null\n  };\n};\n\nexport default connect(mapStateToProps)(MutualMelodiesPreferenceQuiz)","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport LoginPage from \"./modules/spotify-sign-in/LoginPage\";\nimport SpotifyLogoutButton from \"./modules/spotify-sign-in/SpotifyLogoutButton\";\nimport { getCookie } from \"./common/constants\";\nimport \"./App.css\";\nimport Navbar from \"./common/components/Navbar/Navbar\"\nimport { connect } from \"react-redux\";\nimport { setSpotifyApiAction } from \"./redux/actions/apiActions\";\nimport Profile from \"./modules/profile/Profile\";\nimport PlaylistBuilder from \"./modules/playlist-builder/PlaylistBuilder\";\nimport { Container, Row } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport MutualMelodiesPreferenceQuiz from \"./modules/mutual-melodies-preference-quiz/MutualMelodiesPreferenceQuiz\";\n\nimport './common/typography.css'\nimport './common/utilities.css'\nimport './common/components/common-components.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedIn: false,\n      token: \"\",\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    // Add an event listener to update the App component\n    // when the hash link changes. This is to check if the cookie is expired or not.\n    const scrollFunction = function () {\n      window.scrollTo(0, 0);\n    };\n\n    window.addEventListener(\"hashchange\", scrollFunction);\n    window.addEventListener(\"beforeunload\", scrollFunction);\n\n    window.addEventListener(\"hashchange\", () => {\n      this.checkForLogin();\n    });\n\n    this.checkForLogin();\n  }\n\n  checkForLogin() {\n    let token = getCookie(\"spotifyAccessToken\");\n\n    if (token !== \"\" && token != this.state.token) {\n      this.setState({ loggedIn: true, token: token });\n      this.props.setSpotifyApi(token);\n    } else if (token === \"\") {\n      this.setState({ loggedIn: false, token: \"\" });\n    }\n  }\n\n  render() {\n    let { loggedIn } = this.state;\n\n    return (\n      <HashRouter>\n        <div className=\"\" id=\"app-wrapper\">\n          \n\n          {loggedIn ? (\n            <React.Fragment>\n              <Navbar />\n              <div id=\"playlists-view-wrapper\">\n                <Container>\n                  <Row>\n                    <Route exact path=\"(|/profile)\" component={Profile} />\n                    <Route\n                      exact\n                      path=\"/playlist-builder\"\n                      component={PlaylistBuilder}\n                    />\n                    <Route exact path=\"/music-preference-quiz\" component={MutualMelodiesPreferenceQuiz} />\n                  </Row>\n                </Container>\n              </div>\n            </React.Fragment>\n          ) : (\n            <LoginPage />\n          )}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSpotifyApi: (accessToken) => dispatch(setSpotifyApiAction(accessToken)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport apiReducer from \"./apiReducer\";\nimport playlistReducer from \"./playlistReducer\";\n\nexport default combineReducers({\n  api: apiReducer,\n  playlist: playlistReducer\n});\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SPOTIFY_API\":\n      return {\n        ...state,\n        spotifyApi: action.payload\n      };\n    case \"SET_USER_ID\":\n      return {\n        ...state,\n        userId: action.payload\n      }\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SELECTED_PLAYLIST\":\n      return {\n        ...state,\n        selectedPlaylist: action.payload\n      };\n    case \"LOAD_EDITABLE_PLAYLISTS\":\n      return {\n        ...state,\n        editablePlaylists: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./common/slider.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <Provider\n    store={configureStore({ api: null, playlist: { editablePlaylists: [] } })}\n  >\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./redux/reducers/rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n/*\n * src/store.js\n * With initialState\n */\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"],"sourceRoot":""}