{"version":3,"sources":["common/constants.js","modules/spotify-sign-in/SpotifyLoginButton.jsx","common/components/Spacer.jsx","modules/spotify-sign-in/LoginPage.jsx","modules/spotify-sign-in/SpotifyLogoutButton.jsx","common/components/Navbar.jsx","redux/actions/playlistActions.js","modules/profile/subcomponents/personal-playlists/PlaylistCard.jsx","modules/profile/subcomponents/personal-playlists/PersonalPlaylists.jsx","modules/profile/subcomponents/ProfileInfo.jsx","modules/profile/subcomponents/TopArtists.jsx","modules/profile/subcomponents/TopTracks.jsx","modules/profile/Profile.jsx","modules/playlist-builder/subcomponents/PlaylistInfo.jsx","modules/playlist-builder/subcomponents/PlaylistTrackStatistics.jsx","modules/playlist-builder/subcomponents/TrackTable.jsx","modules/playlist-builder/subcomponents/PlaylistTracklist.jsx","modules/playlist-builder/subcomponents/Recommendations.jsx","modules/playlist-builder/PlaylistBuilder.jsx","App.js","redux/actions/apiActions.js","serviceWorker.js","redux/reducers/playlistReducer.js","redux/reducers/rootReducer.js","redux/reducers/apiReducer.js","index.js","store.js"],"names":["clientID","setCookie","cname","cvalue","expirationHours","d","Date","setTime","getTime","expires","toUTCString","document","cookie","deepCamelCaseKeys","variable","Array","forEach","object","index","Object","keys","key","camelCaseKeys","isBelowSmallBreakpoint","window","innerWidth","isBelowExtraSmallBreakpoint","SpotifyLoginButton","props","autoBind","data","token","access_token","location","reload","clientId","redirectUri","onSuccess","this","handleAccessToken","onFailure","error","console","log","scope","className","Component","Spacer","style","height","percentage","pixels","LoginPage","id","SpotifyLogoutButton","Button","variant","onClick","handleLogout","color","width","fontSize","Navbar","addEventListener","forceUpdate","noButtons","to","setSelectedPlaylist","playlistId","spotifyApi","dispatch","a","playlistResponse","getPlaylist","then","body","notAllTracks","tracks","next","items","offset","getPlaylistTracks","concat","hash","type","payload","PlaylistCard","updateSelectedPlaylist","api","playlist","Swal","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","allowEscapeKey","allowOutsideClick","updatePlaylists","unfollowConfirmation","result","value","unfollowPlaylist","name","dismiss","DismissReason","cancel","Col","xs","sm","lg","Row","Image","src","images","url","public","selectPlaylist","connect","PersonalPlaylists","state","playlists","getPersonalPlaylistData","userId","loadEditablePlaylists","setState","map","editablePlaylists","playlistsResponse","getUserPlaylists","limit","response","notAllPlaylists","morePlaylistsResponse","filter","owner","collaborative","loadUsersEditablePlaylists","ProfileInfo","profile","displayName","email","followers","externalUrls","total","TopArtists","topArtists","getMyTopArtists","topArtist","roundedCircle","fluid","TopTracks","topTracks","getMyTopTracks","topTrack","album","Profile","getMe","PlaylistInfo","description","PlaylistTrackStatistics","tempo","loudness","danceability","valence","energy","durationMs","popularity","calculateAverageStatistics","statistics","trackIds","playlistTrack","push","track","haveToLoop","length","trackStatistics","getAudioFeaturesForTracks","splice","audioFeatures","numOfStatisticsReceived","trackStatistic","duration","ms","seconds","hours","Math","floor","minutes","msToHM","round","ProgressBar","animated","striped","now","TrackTable","spotifyTrackId","tracksInPlaylist","play","context_uri","uri","uris","addTracksToPlaylist","updateCallback","removeTracksFromPlaylist","Table","responsive","hover","size","artists","artist","handleRemoveTrackFromPlaylist","handleAddTrackToPlaylist","handlePlayTrackOnSpotify","PlaylistTracklist","currentPage","newPageIndex","currentPageTracks","Pagination","Prev","disabled","changeCurrentPageHandler","Next","Recommendations","recommendedTracks","selectedArtistSeeds","0","1","2","selectedTrackSeeds","targetValence","targetEnergy","targetDanceability","targetBPM","targetPopularity","handleRecommendationGeneration","atLeastOneSeedSelected","updateRecommendations","seedArtistIds","seedIndex","seedTrackIds","query","target_bpm","target_valence","target_energy","target_danceability","target_popularity","seed_artists","seed_tracks","getRecommendations","message","artistSeeds","trackSeeds","event","target","playlistTracks","artistIdArray","Form","Group","controlId","seedNumber","md","Control","as","onChange","handleAddSeedArtist","numberOfSeedsFull","artistId","trackIdArray","handleAddSeedTrack","trackId","min","max","step","defaultValue","onSubmit","renderSeedTracksDropdown","renderSeedArtistsDropdown","renderAudioFeatureSliders","PlaylistBuilder","selectedPlaylist","href","App","loggedIn","checkForLogin","ca","split","i","c","charAt","substring","indexOf","getCookie","setSpotifyApi","Container","exact","path","component","React","accessToken","SpotifyWebApi","setAccessToken","setSpotifyApiAction","Boolean","hostname","match","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e3c74d7.chunk.js","sourcesContent":["import camelCaseKeys from \"camelcase-keys\";\n\nexport let spotifyScopes =\n  \"user-top-read user-library-read \" +\n  \"playlist-modify-public playlist-read-private playlist-read-collaborative \" +\n  \"user-read-email playlist-modify-private streaming\";\n\nexport let redirectURI = \"https://playlistninja.app\";\nexport let clientID = \"90a54f792a9e4fff94eec8d0c0075bd0\";\n\nexport function setCookie(cname, cvalue, expirationHours) {\n  var d = new Date();\n  d.setTime(d.getTime() + expirationHours * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport function getCookie(cname) {\n  var name = cname + \"=\";\n  var ca = document.cookie.split(\";\");\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport function deepCamelCaseKeys(variable) {\n  if (variable === null) {\n    return null;\n  } else if (variable instanceof Array) {\n    variable.forEach((object, index) => {\n      variable[index] = deepCamelCaseKeys(object);\n    });\n\n    return variable;\n  } else if (variable instanceof Object) {\n    Object.keys(variable).forEach(key => {\n      variable[key] = deepCamelCaseKeys(variable[key]);\n    });\n\n    return camelCaseKeys(variable);\n  } else {\n    return variable;\n  }\n}\n\nexport function isBelowLargeBreakpoint() {\n  return window.innerWidth < 1200;\n}\n\nexport function isBelowMediumBreakpoint() {\n  return window.innerWidth < 992;\n}\n\nexport function isBelowSmallBreakpoint() {\n  return window.innerWidth < 768;\n}\n\nexport function isBelowExtraSmallBreakpoint() {\n  return window.innerWidth < 576;\n}\n\nexport function msToHM(ms) {\n  let seconds = ms / 1000;\n\n  let hours = Math.floor(seconds / 3600);\n  seconds = seconds % 3600;\n\n  let minutes = Math.floor(seconds / 60);\n\n  return {\n    hours,\n    minutes\n  };\n}\n","import React, { Component } from \"react\";\nimport SpotifyLogin from \"react-spotify-login\";\nimport { spotifyScopes, setCookie } from \"../../common/constants\";\nimport autoBind from \"react-autobind\";\nimport { redirectURI, clientID } from \"../../common/constants\";\nimport \"./sign-in.css\";\n\nclass SpotifyLoginButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  async handleAccessToken(data) {\n    let token = data.access_token;\n\n    // Set the token in cookies, we want to make sure that this happens first so we await it.\n    await setCookie(\"spotifyAccessToken\", token, 1);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <SpotifyLogin\n        clientId={clientID}\n        redirectUri={redirectURI}\n        onSuccess={this.handleAccessToken}\n        onFailure={error => console.log(error)}\n        scope={spotifyScopes}\n        className=\"btn btn-md btn-primary\"\n      />\n    );\n  }\n}\n\nexport default SpotifyLoginButton;\n","import React, { Component } from \"react\";\n\nexport default class Spacer extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: `${\n            this.props.percentage\n              ? this.props.percentage + \"vh\"\n              : this.props.pixels + \"px\"\n          }`\n        }}\n      ></div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport SpotifyLoginButton from \"./SpotifyLoginButton\";\nimport Spacer from \"../../common/components/Spacer\";\nimport \"./sign-in.css\";\n\nclass LoginPage extends Component {\n  render() {\n    return (\n      <div id=\"logged-out-wrapper\">\n        <div className=\"w-50 p-3 custom-card text-center\">\n          <Spacer percentage={7} />\n          <h3> Login to Playlist Ninja</h3>\n          <hr />\n          <SpotifyLoginButton />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\nimport { setCookie } from \"../../common/constants\";\nimport { Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass SpotifyLogoutButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  handleLogout() {\n    // remove the cookie from the browser that holds the token to logout\n    setCookie(\"spotifyAccessToken\", \"\", 0);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={this.handleLogout}\n        style={{ color: \"red\", width: \"fit-content\" }}\n      >\n        <p className=\"lead\" style={{ fontSize: \"1rem\" }}>\n          Log Out\n        </p>\n      </Button>\n    );\n  }\n}\n\nexport default SpotifyLogoutButton;\n","import React, { Component } from \"react\";\nimport \"./common-components.css\";\nimport { isBelowSmallBreakpoint } from \"../constants\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Navbar extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-app-nav\">\n          {!this.props.noButtons && (\n            <div className=\"main-nav-button\">\n              <Link to=\"profile\" className=\"text-dark\">\n                <i\n                  className={`far fa-address-card ${\n                    isBelowSmallBreakpoint()\n                      ? \"main-nav-icon-phone\"\n                      : \"main-nav-icon-desktop\"\n                  }`}\n                />\n              </Link>\n            </div>\n          )}\n\n          <div className=\"main-nav-button\">\n            <i\n              className={`fa fa-user-ninja p-2 ${\n                isBelowSmallBreakpoint()\n                  ? \"main-nav-icon-phone\"\n                  : \"main-nav-icon-desktop\"\n              }`}\n            />\n            {isBelowSmallBreakpoint() ? (\n              <h6 className=\"m-0\">PLAYLIST NINJA</h6>\n            ) : (\n              <h4 className=\"m-0\">PLAYLIST NINJA</h4>\n            )}\n          </div>\n\n          {!this.props.noButtons && (\n            <div className=\"main-nav-button\">\n              <Link to=\"playlist-builder\" className=\"text-dark\">\n                <i\n                  className={`fa fa-sliders-h ${\n                    isBelowSmallBreakpoint()\n                      ? \"main-nav-icon-phone\"\n                      : \"main-nav-icon-desktop\"\n                  }`}\n                />\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"main-app-nav-ghost\" />\n      </div>\n    );\n  }\n}\n","export const setSelectedPlaylist = (\n  playlistId,\n  spotifyApi\n) => async dispatch => {\n  let playlistResponse = null;\n\n  await spotifyApi\n    .getPlaylist(playlistId)\n    .then(\n      async data => {\n        playlistResponse = data.body;\n\n        let notAllTracks = playlistResponse.tracks.next;\n\n        playlistResponse.tracks = playlistResponse.tracks.items;\n\n        if (notAllTracks) {\n          let offset = 100;\n\n          while (notAllTracks) {\n            await spotifyApi\n              .getPlaylistTracks(playlistId, { offset })\n              .then(data => {\n                if (!data.body.next) {\n                  notAllTracks = false;\n                }\n\n                offset += 100;\n\n                playlistResponse.tracks = playlistResponse.tracks.concat(\n                  data.body.items\n                );\n              });\n          }\n        }\n      },\n      error => {\n        playlistResponse = error;\n      }\n    )\n    .then(() => {\n      window.location.hash = \"#/playlist-builder\";\n    });\n\n  dispatch({\n    type: \"SET_SELECTED_PLAYLIST\",\n    payload: playlistResponse\n  });\n};\nexport const loadUsersEditablePlaylists = (\n  userId,\n  spotifyApi\n) => async dispatch => {\n  let playlistsResponse = null;\n\n  await spotifyApi.getUserPlaylists(userId, { limit: 50 }).then(\n    async response => {\n      playlistsResponse = response.body.items;\n      let notAllPlaylists = response.body.next;\n\n      if (notAllPlaylists) {\n        let offset = 50;\n\n        while (notAllPlaylists) {\n          await spotifyApi\n            .getUserPlaylists(userId, { limit: 50, offset })\n            .then(morePlaylistsResponse => {\n              if (!morePlaylistsResponse.body.next) {\n                notAllPlaylists = false;\n              }\n\n              offset += 50;\n\n              playlistsResponse = playlistsResponse.concat(\n                morePlaylistsResponse.body.items\n              );\n            });\n        }\n      }\n\n      playlistsResponse = playlistsResponse.filter(playlist => {\n        return playlist.owner.id == userId || playlist.collaborative;\n      });\n    },\n    error => {\n      playlistsResponse = error;\n    }\n  );\n\n  dispatch({\n    type: \"LOAD_EDITABLE_PLAYLISTS\",\n    payload: playlistsResponse\n  });\n};\n","import React, { Component } from \"react\";\nimport { Row, Col, Image, Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport \"./playlists.css\";\nimport { setSelectedPlaylist } from \"../../../../redux/actions/playlistActions\";\nimport {\n  isBelowSmallBreakpoint,\n  isBelowExtraSmallBreakpoint\n} from \"../../../../common/constants\";\n\nclass PlaylistCard extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  selectPlaylist() {\n    let { updateSelectedPlaylist, api, playlist } = this.props;\n\n    updateSelectedPlaylist(playlist.id, api);\n  }\n\n  /**\n   *  Renders a confirmation alert to make sure that the user wants to unfollow their playlist.\n   */\n\n  unfollowConfirmation() {\n    return Swal.fire({\n      title: \"Unfollow Playlist\",\n      text:\n        \"Are you sure you want to unfollow? It will no longer be visible in your library.\",\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, unfollow this playlist.\",\n      cancelButtonText: \"Cancel\",\n      allowEscapeKey: false,\n      allowOutsideClick: false\n    });\n  }\n\n  /**\n   *  Unfollows the playlist that this PlaylistCard represents.\n   */\n  unfollowPlaylist() {\n    let { playlist, api, updatePlaylists } = this.props;\n\n    debugger;\n\n    this.unfollowConfirmation().then(result => {\n      if (result.value) {\n        api.unfollowPlaylist(playlist.id).then(() => {\n          Swal.fire({\n            type: \"success\",\n            text: `Unfollowed playlist: \"${playlist.name}\"`\n          });\n          updatePlaylists();\n        });\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire({ text: \"Did not unfollow playlist.\" });\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    let { playlist } = this.props;\n\n    return (\n      <Col xs={12} sm={12} lg={12} className=\"playlist-card-col\">\n        <Row\n          className={\n            !isBelowSmallBreakpoint()\n              ? \"playlist-card content-card playlist-row-height p-1\"\n              : \"playlist-card content-card p-1\"\n          }\n        >\n          <Col\n            xs={12}\n            sm={6}\n            className={`playlist-card-content text-center d-flex ${\n              isBelowExtraSmallBreakpoint() ? \"space-between\" : \"\"\n            }`}\n          >\n            <Image\n              src={playlist.images[0] ? playlist.images[0].url : null}\n              className={\n                isBelowSmallBreakpoint()\n                  ? \"mobile-playlist-card-image\"\n                  : \"desktop-playlist-card-image\"\n              }\n            />\n            <div\n              className={\n                isBelowExtraSmallBreakpoint() ? \"text-right\" : \"text-left\"\n              }\n            >\n              <h5 className=\"m-1 ml-2\">{playlist.name}</h5>\n              <p className=\"ml-2 m-0\">\n                {playlist.public ? \"Public\" : \"Private\"}\n              </p>\n            </div>\n          </Col>\n\n          <Col\n            xs={12}\n            sm={6}\n            className={isBelowExtraSmallBreakpoint() ? \"p-0\" : \"\"}\n          >\n            {isBelowExtraSmallBreakpoint() && (\n              <div className=\"mobile-playlist-card-button-wrapper\">\n                <Button\n                  variant=\"primary\"\n                  className=\"\"\n                  onClick={this.selectPlaylist}\n                >\n                  Edit\n                </Button>\n                <Button\n                  variant=\"outline-danger\"\n                  onClick={this.unfollowPlaylist}\n                >\n                  Unfollow\n                </Button>\n              </div>\n            )}\n\n            {!isBelowExtraSmallBreakpoint() && (\n              <div className=\"desktop-playlist-card-button-wrapper\">\n                <Button\n                  variant=\"outline-danger\"\n                  className=\"m-1\"\n                  onClick={this.unfollowPlaylist}\n                >\n                  Unfollow\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  className=\"m-1\"\n                  onClick={this.selectPlaylist}\n                >\n                  Edit\n                </Button>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PlaylistCard);\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport autoBind from \"react-autobind\";\nimport PlaylistCard from \"./PlaylistCard\";\nimport Spacer from \"../../../../common/components/Spacer\";\nimport { loadUsersEditablePlaylists } from \"../../../../redux/actions/playlistActions\";\n\nclass PersonalPlaylists extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playlists: null,\n      error: null\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    this.getPersonalPlaylistData();\n  }\n\n  getPersonalPlaylistData() {\n    let { userId, api } = this.props;\n\n    if (userId) {\n      this.props.loadEditablePlaylists(userId, api);\n    } else {\n      this.setState({ error: \"No user ID found, please reload\" });\n    }\n  }\n\n  render() {\n    if (this.props.playlists) {\n      let { playlists } = this.props;\n\n      return (\n        <Row className=\"text-center m-3 pb-2\">\n          <Col xs={12}>\n            <h3 className=\"display-5\"> My Playlists </h3>\n            <Spacer percentage={3} />\n          </Col>\n\n          {playlists.map(playlist => {\n            return (\n              <PlaylistCard\n                playlist={playlist}\n                api={this.props.api}\n                updatePlaylists={this.getPersonalPlaylistData}\n              />\n            );\n          })}\n        </Row>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport const mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi,\n    playlists: state.playlist.editablePlaylists\n  };\n};\n\nexport const mapDispatchToProps = dispatch => {\n  return {\n    loadEditablePlaylists: (userId, spotifyApi) =>\n      dispatch(loadUsersEditablePlaylists(userId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PersonalPlaylists);\n","import React, { Component } from \"react\";\nimport { Image, Col, Row } from \"react-bootstrap\";\nimport Spacer from \"../../../common/components/Spacer\";\nimport SpotifyLogoutButton from \"../../spotify-sign-in/SpotifyLogoutButton\";\n\nclass ProfileInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let { profile } = this.props;\n\n    if (profile) {\n      let {\n        profile: { displayName, email, id, images, externalUrls, followers }\n      } = this.props;\n\n      return (\n        <Row>\n          <Col xs={12} className=\"text-center break-long-words\">\n            <Image\n              src={images[0] ? images[0].url : \"\"}\n              className=\"drop-shadow profile-image\"\n            />\n            <Spacer percentage={5} />\n            <h1 className=\"display-4\">{displayName}</h1>\n            <h5 className=\"lead\">{email}</h5>\n            <h2 className=\"lead mb-0\">{followers.total} followers</h2>\n            <SpotifyLogoutButton />\n          </Col>\n        </Row>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ProfileInfo;\n","import React, { Component } from \"react\";\nimport { Image, Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../../common/constants\";\nimport Spacer from \"../../../common/components/Spacer\";\n\nclass TopArtists extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topArtists: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.spotifyApi.getMyTopArtists({ limit: 6 }).then(\n      data => {\n        this.setState({ topArtists: data.body });\n      },\n      error => {\n        this.setState({ error: deepCamelCaseKeys(error) });\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <Row className=\"p-3\">\n        <Col xs={12} className=\"text-center\">\n          <h3 className=\"display-5\"> Top Artists </h3>\n          <Spacer percentage={4} />\n        </Col>\n\n        {this.state.topArtists &&\n          this.state.topArtists.items.map(topArtist => {\n            return (\n              <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                <div className=\"p-2 break-long-words\">\n                  <Image\n                    src={topArtist.images[0].url}\n                    roundedCircle\n                    fluid\n                    className=\"drop-shadow mb-3\"\n                  />\n                  <p className=\"lead\">{topArtist.name}</p>\n                </div>\n              </Col>\n            );\n          })}\n      </Row>\n    );\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport default connect(mapStateToProps)(TopArtists);\n","import React, { Component } from \"react\";\nimport { Image, Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../../common/constants\";\nimport Spacer from \"../../../common/components/Spacer\";\n\nclass TopTracks extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topTracks: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.spotifyApi.getMyTopTracks({ limit: 12 }).then(\n      data => {\n        this.setState({ topTracks: data.body });\n      },\n      error => {\n        this.setState({ error: deepCamelCaseKeys(error) });\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <Row className=\"p-3\">\n        <Col xs={12} className=\"text-center\">\n          <h3 className=\"display-5\"> Top Tracks </h3>\n          <Spacer percentage={4} />\n        </Col>\n\n        {this.state.topTracks &&\n          this.state.topTracks.items.map(topTrack => {\n            return (\n              <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                <div className=\"p-2 break-long-words\">\n                  <Image\n                    src={topTrack.album.images[0].url}\n                    fluid\n                    className=\"drop-shadow mb-3\"\n                  />\n                  <p className=\"lead\">{topTrack.name}</p>\n                </div>\n              </Col>\n            );\n          })}\n      </Row>\n    );\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport default connect(mapStateToProps)(TopTracks);\n","import React, { Component } from \"react\";\nimport \"./profile.css\";\nimport Spacer from \"../../common/components/Spacer\";\nimport PersonalPlaylists from \"./subcomponents/personal-playlists/PersonalPlaylists\";\nimport ProfileInfo from \"./subcomponents/ProfileInfo\";\nimport TopArtists from \"./subcomponents/TopArtists\";\nimport TopTracks from \"./subcomponents/TopTracks\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../common/constants\";\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profile: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.spotifyApi.getMe().then(\n      data => {\n        this.setState({ profile: deepCamelCaseKeys(data.body) });\n      },\n      error => {\n        this.setState({ error: deepCamelCaseKeys(error) });\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  render() {\n    let { profile } = this.state;\n\n    if (profile) {\n      return (\n        <div className=\"profile-wrapper\">\n          <ProfileInfo profile={profile} />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <TopArtists />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <TopTracks />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <PersonalPlaylists userId={profile.id} />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport default connect(mapStateToProps)(Profile);\n","import React, { Component } from \"react\";\nimport \"../playlist-builder.css\";\nimport { Image, Col, Row } from \"react-bootstrap\";\nimport { isBelowSmallBreakpoint } from \"../../../common/constants\";\n\nexport default class PlaylistInfo extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    let { playlist } = this.props;\n\n    return (\n      <div id=\"playlist-info-wrapper\" className=\"p-2\">\n        <Row>\n          <Col className=\"playlist-image-wrapper\" xs={12} sm={6}>\n            {playlist.images[0] ? (\n              <Image\n                src={playlist.images[0].url}\n                className=\"playlist-info-image\"\n              />\n            ) : null}\n          </Col>\n          <Col\n            className=\"playlist-title-desc-wrapper text-right break-long-words p-3\"\n            xs={12}\n            sm={6}\n          >\n            <h2 className={!isBelowSmallBreakpoint() ? \"display-4\" : \"\"}>\n              {playlist.name}\n            </h2>\n            <p>{playlist.description || \"No description provided.\"}</p>\n            <p>\n              {playlist.followers.total}{\" \"}\n              {playlist.followers.total == 1 ? \"follower\" : \"followers\"}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  deepCamelCaseKeys,\n  msToHM,\n  isBelowSmallBreakpoint\n} from \"../../../common/constants\";\nimport { Row, Col, ProgressBar } from \"react-bootstrap\";\n\nclass PlaylistTrackStatistics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempo: 0,\n      loudness: 0,\n      danceability: 0,\n      valence: 0,\n      energy: 0,\n      durationMs: 0,\n      popularity: 0\n    };\n  }\n\n  componentDidMount() {\n    this.calculateAverageStatistics();\n\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  async calculateAverageStatistics() {\n    let { api, tracks } = this.props;\n\n    let statistics = {\n      tempo: null,\n      danceability: null,\n      valence: null,\n      energy: null,\n      durationMs: null,\n      popularity: null\n    };\n\n    let trackIds = [];\n\n    tracks.forEach(playlistTrack => {\n      trackIds.push(playlistTrack.track.id);\n      statistics.popularity =\n        statistics.popularity + playlistTrack.track.popularity;\n    });\n\n    let haveToLoop = trackIds.length > 100;\n\n    let trackStatistics = [];\n\n    if (trackIds.length !== 0) {\n      await api\n        .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n        .then(data => {\n          let response = deepCamelCaseKeys(data.body);\n\n          if (response.audioFeatures) {\n          }\n          trackStatistics = trackStatistics.concat(response.audioFeatures);\n        });\n\n      if (haveToLoop) {\n        let numOfStatisticsReceived = 100;\n\n        while (haveToLoop) {\n          await api\n            .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n            .then(data => {\n              let response = deepCamelCaseKeys(data.body);\n              trackStatistics = trackStatistics.concat(response.audioFeatures);\n              numOfStatisticsReceived += response.audioFeatures.length;\n            });\n\n          if (numOfStatisticsReceived === tracks.length) {\n            haveToLoop = false;\n          }\n        }\n      }\n\n      trackStatistics.forEach(trackStatistic => {\n        if (trackStatistic !== null) {\n          statistics.tempo = statistics.tempo + trackStatistic.tempo;\n          statistics.danceability =\n            statistics.danceability + trackStatistic.danceability;\n          statistics.valence = statistics.valence + trackStatistic.valence;\n          statistics.energy = statistics.energy + trackStatistic.energy;\n          statistics.durationMs =\n            statistics.durationMs + trackStatistic.durationMs;\n        }\n      });\n\n      this.setState({\n        tempo: statistics.tempo / tracks.length,\n        danceability: statistics.danceability / tracks.length,\n        valence: statistics.valence / tracks.length,\n        energy: statistics.energy / tracks.length,\n        durationMs: statistics.durationMs,\n        popularity: statistics.popularity / tracks.length\n      });\n    }\n  }\n\n  render() {\n    let {\n      tempo,\n      danceability,\n      valence,\n      energy,\n      durationMs,\n      popularity\n    } = this.state;\n\n    if (!(tempo && danceability && valence && energy && durationMs)) {\n      return (\n        <div className=\"m-1 mt-3\">\n          <Row className=\"p-2 justify-content-center\">\n            <Col xs={12} className=\"p-2 mb-2 text-center\">\n              No tracks in this playlist, so there are no statistics.\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n\n    let duration = msToHM(Math.round(durationMs));\n\n    return (\n      <div className=\"m-1 mt-3\">\n        <Row className=\"p-2 justify-content-center\">\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Energy:\n            </p>\n            <ProgressBar animated striped now={energy * 100} />\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Danceability:\n            </p>\n            <ProgressBar animated striped now={danceability * 100} />\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Valence:\n            </p>\n            <ProgressBar animated striped now={valence * 100} />\n          </Col>\n        </Row>\n        <Row className=\"p-2 justify-content-center\">\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Tempo: <br />\n              {Math.round(tempo)}BPM\n            </p>\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Duration: <br />\n              {duration.hours > 0 ? duration.hours + \"hrs\" : \"\"}{\" \"}\n              {duration.minutes > 0 ? duration.minutes + \"mins\" : \"\"}\n            </p>\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Popularity: <br />\n              {Math.round(popularity)}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistTrackStatistics;\n","import React, { Component } from \"react\";\nimport { Table, Button, Image } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport autoBind from \"react-autobind\";\nimport { setSelectedPlaylist } from \"../../../redux/actions/playlistActions\";\nimport \"../playlist-builder.css\";\n\nclass TrackTable extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  /**\n   * Handles playling a single track on the user's currently active spotify device.\n   * @param {string} spotifyTrackId The ID of the spotify track that should be played.\n   */\n  handlePlayTrackOnSpotify(spotifyTrackId) {\n    return () => {\n      let { api, playlistId, tracksInPlaylist } = this.props;\n\n      if (tracksInPlaylist) {\n        api\n          .play({\n            context_uri: `spotify:playlist:${playlistId}`,\n            offset: { uri: `spotify:track:${spotifyTrackId}` }\n          })\n          .then(\n            response => {\n              //TODO: Handle response data and store currently playing.\n            },\n            error => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      } else {\n        api\n          .play({\n            uris: [`spotify:track:${spotifyTrackId}`]\n          })\n          .then(\n            response => {\n              //TODO: Handle response data and store currently playing.\n            },\n            error => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      }\n    };\n  }\n\n  /**\n   * Handles adding a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be added.\n   */\n  handleAddTrackToPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api } = this.props;\n\n      api\n        .addTracksToPlaylist(playlistId, [`spotify:track:${spotifyTrackId}`])\n        .then(\n          async response => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          error => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  /**\n   * Handles removing a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be removed.\n   */\n  handleRemoveTrackFromPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api, setSelectedPlaylist } = this.props;\n\n      api\n        .removeTracksFromPlaylist(playlistId, [\n          { uri: `spotify:track:${spotifyTrackId}` }\n        ])\n        .then(\n          async response => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          error => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  render() {\n    return (\n      <Table responsive striped hover size=\"sm\" className=\"text-left\">\n        <thead></thead>\n        <tbody>\n          {this.props.tracks.map(track => {\n            return (\n              <tr>\n                <td className=\"maxw-50-view\">\n                  <div className=\"d-flex align-center\">\n                    {track.album.images[0] && (\n                      <Image\n                        src={track.album.images[0].url}\n                        className=\"track-table-image m-1\"\n                      />\n                    )}\n                    <div className=\"break-long-words\">\n                      <p className=\"track-table-title\">{track.name}</p>\n                      <p className=\"track-table-font \">\n                        {track.artists.map((artist, index) => {\n                          return index === track.artists.length - 1\n                            ? artist.name\n                            : artist.name + \", \";\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"h-100 break-long-words d-flex justify-end p-1 align-center\">\n                  {this.props.tracksInPlaylist ? (\n                    <Button\n                      onClick={this.handleRemoveTrackFromPlaylist(track.id)}\n                      className=\"mr-1 mt-1 mb-1\"\n                      variant=\"danger\"\n                    >\n                      -\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={this.handleAddTrackToPlaylist(track.id)}\n                      className=\"mr-1 mt-1 mb-1\"\n                    >\n                      +\n                    </Button>\n                  )}\n                  <Button\n                    className=\"ml-1 mt-1 mb-1\"\n                    onClick={this.handlePlayTrackOnSpotify(track.id)}\n                  >\n                    {\" \"}\n                    Play{\" \"}\n                  </Button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TrackTable);\n","import React, { Component } from \"react\";\nimport { isBelowSmallBreakpoint } from \"../../../common/constants\";\nimport TrackTable from \"./TrackTable\";\nimport { Pagination } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass PlaylistTracklist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: 0\n    };\n\n    autoBind(this);\n  }\n\n  /**\n   * Returns an event handler that changes the current page to the\n   * page with the given index.\n   * @param {number} newPageIndex The index of the page to change to.\n   */\n  changeCurrentPageHandler(newPageIndex) {\n    return () => {\n      this.setState({ currentPage: newPageIndex });\n    };\n  }\n\n  render() {\n    let { currentPage } = this.state;\n    let { tracks } = this.props;\n\n    // Copy the tracks and splice the current page from the copy.\n    let tracksCopy = tracks.concat([]);\n    let currentPageTracks = tracksCopy.splice(currentPage * 8, 8);\n\n    // Map the playlist track objects into the actual track objects for display.\n    currentPageTracks = currentPageTracks.map(\n      playlistTrack => playlistTrack.track\n    );\n\n    return (\n      <div>\n        <div className=\"text-center\">\n          <h4> Track List </h4>\n          <br />\n        </div>\n        <TrackTable\n          tracks={currentPageTracks}\n          tracksInPlaylist={true}\n          playlistId={this.props.playlistId}\n        />\n        <div className=\"d-flex justify-content-center\">\n          <Pagination>\n            <Pagination.Prev\n              disabled={currentPage === 0}\n              onClick={this.changeCurrentPageHandler(\n                this.state.currentPage - 1\n              )}\n            />\n            <Pagination.Next\n              disabled={(currentPage + 1) * 8 >= tracks.length}\n              onClick={this.changeCurrentPageHandler(\n                this.state.currentPage + 1\n              )}\n            />\n          </Pagination>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistTracklist;\n","import React, { Component } from \"react\";\nimport TrackTable from \"./TrackTable\";\nimport { connect } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport Slider from \"rc-slider\";\nimport { setSelectedPlaylist } from \"../../../redux/actions/playlistActions\";\n\nclass Recommendations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recommendedTracks: [],\n      selectedArtistSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\"\n      },\n      selectedTrackSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\"\n      },\n      targetValence: 0.5,\n      targetEnergy: 0.5,\n      targetDanceability: 0.5,\n      targetBPM: 100,\n      targetPopularity: 50,\n      error: null\n    };\n\n    autoBind(this);\n\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  componentDidMount() {\n    this.handleRecommendationGeneration();\n  }\n\n  /**\n   * A method to update the selected playlist. It calls the redux action to load a selected playlist with this playlist's id.\n   */\n  updateSelectedPlaylist() {\n    let { api, playlistId, setSelectedPlaylist } = this.props;\n    setSelectedPlaylist(playlistId, api);\n  }\n\n  /**\n   * Determines whether or not we should generate recommendations.\n   * Checks that there is at least one seed selected, if not it sets an\n   * error in the state.\n   *\n   * @returns void\n   */\n  handleRecommendationGeneration() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let atLeastOneSeedSelected = false;\n\n    Object.keys(selectedArtistSeeds).forEach(index => {\n      if (selectedArtistSeeds[index] !== \"\") {\n        atLeastOneSeedSelected = true;\n      }\n    });\n\n    if (!atLeastOneSeedSelected) {\n      Object.keys(selectedTrackSeeds).forEach(index => {\n        if (selectedTrackSeeds[index] !== \"\") {\n          atLeastOneSeedSelected = true;\n        }\n      });\n    }\n\n    if (atLeastOneSeedSelected) {\n      this.updateRecommendations();\n    } else {\n      this.setState({\n        error: \"You must choose at least one seed for recommendations.\"\n      });\n    }\n  }\n\n  /**\n   * Updates the recommendations for the playlist with the currently\n   * selected values and seeds and updates the table.\n   *\n   * @returns void\n   */\n  updateRecommendations() {\n    let { api } = this.props;\n    let {\n      selectedArtistSeeds,\n      selectedTrackSeeds,\n      targetValence,\n      targetEnergy,\n      targetDanceability,\n      targetBPM,\n      targetPopularity\n    } = this.state;\n\n    let seedArtistIds = [];\n    Object.keys(selectedArtistSeeds).forEach(seedIndex => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        seedArtistIds.push(selectedArtistSeeds[seedIndex]);\n      }\n    });\n\n    let seedTrackIds = [];\n    Object.keys(selectedTrackSeeds).forEach(seedIndex => {\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        seedTrackIds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    let query = {\n      limit: 35,\n      target_bpm: targetBPM,\n      target_valence: targetValence,\n      target_energy: targetEnergy,\n      target_danceability: targetDanceability,\n      target_popularity: targetPopularity,\n      seed_artists: seedArtistIds,\n      seed_tracks: seedTrackIds\n    };\n\n    api.getRecommendations(query).then(\n      data => {\n        this.setState({ recommendedTracks: data.body.tracks, error: null });\n      },\n      error => {\n        this.setState({ error: error.message });\n      }\n    );\n  }\n\n  /**\n   * Method to see if all the seeds for recommendations are filled since\n   * Spotify only allows 5 seeds of any type.\n   *\n   * @returns a boolean representing whether or not we have the max amounts of seeds.\n   */\n  numberOfSeedsFull() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let artistSeeds = [];\n    let trackSeeds = [];\n\n    [0, 1, 2].forEach(seedIndex => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        artistSeeds.push(selectedArtistSeeds[seedIndex]);\n      }\n\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        trackSeeds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    return artistSeeds.length + trackSeeds.length >= 5;\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed artist to change.\n   */\n  handleAddSeedArtist(index) {\n    return event => {\n      this.setState({\n        selectedArtistSeeds: {\n          ...this.state.selectedArtistSeeds,\n          [index]: event.target.value\n        }\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed artists.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedArtistsDropdown() {\n    let { playlistTracks } = this.props;\n\n    let artists = {};\n\n    playlistTracks.forEach(playlistTrack => {\n      playlistTrack.track.artists.forEach(artist => {\n        artists[artist.id] = artist.name;\n      });\n    });\n\n    let artistIdArray = Object.keys(artists);\n\n    return (\n      <Form.Group controlId=\"seedArtists\">\n        <Row className=\"w-100 m-0\">\n          <Col xs={12} className=\"text-left\">\n            <h5 className=\"lead\">Similar Artists</h5>\n          </Col>\n\n          {[1, 2, 3].map(seedNumber => {\n            let { selectedArtistSeeds } = this.state;\n\n            return (\n              <Col sm={12} md={4} className=\"p-1\">\n                <Form.Control\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedArtist(seedNumber - 1)}\n                  disabled={\n                    selectedArtistSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                >\n                  <option value=\"\">None</option>\n                  {artistIdArray.map(artistId => {\n                    return (\n                      <option value={artistId}>{artists[artistId]}</option>\n                    );\n                  })}\n                </Form.Control>\n              </Col>\n            );\n          })}\n        </Row>\n      </Form.Group>\n    );\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed track to change.\n   */\n  handleAddSeedTrack(index) {\n    return event => {\n      this.setState({\n        selectedTrackSeeds: {\n          ...this.state.selectedTrackSeeds,\n          [index]: event.target.value\n        }\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedTracksDropdown() {\n    let { playlistTracks } = this.props;\n\n    let tracks = {};\n\n    playlistTracks.forEach(playlistTrack => {\n      let track = playlistTrack.track;\n\n      tracks[track.id] = track.name;\n    });\n\n    let trackIdArray = Object.keys(tracks);\n\n    return (\n      <Form.Group controlId=\"seedTracks\">\n        <Row className=\"w-100 m-0\">\n          <Col xs={12} className=\"text-left\">\n            <h5 className=\"lead\">Similar Tracks</h5>\n          </Col>\n\n          {[1, 2, 3].map(seedNumber => {\n            let { selectedTrackSeeds } = this.state;\n\n            return (\n              <Col sm={12} md={4} className=\"p-1\">\n                <Form.Control\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedTrack(seedNumber - 1)}\n                  disabled={\n                    selectedTrackSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                >\n                  <option value=\"\">None</option>\n                  {trackIdArray.map(trackId => {\n                    return <option value={trackId}>{tracks[trackId]}</option>;\n                  })}\n                </Form.Control>\n              </Col>\n            );\n          })}\n        </Row>\n      </Form.Group>\n    );\n  }\n\n  /**\n   * Renders the sliders for selecting target audio features for the\n   * recommended tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderAudioFeatureSliders() {\n    return (\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} className=\"text-left\">\n          <h5 className=\"lead\">Target Statistics</h5>\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Danceability </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetDanceability * 100}\n            onChange={value =>\n              this.setState({ targetDanceability: value / 100 })\n            }\n            className=\"w-50\"\n          />\n        </Col>\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Energy </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetEnergy * 100}\n            onChange={value => this.setState({ targetEnergy: value / 100 })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Valence </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetValence * 100}\n            onChange={value => this.setState({ targetValence: value / 100 })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Tempo </p>\n          <Slider\n            min={0}\n            max={250}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetBPM}\n            onChange={value => this.setState({ targetBPM: value })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Popularity </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetPopularity}\n            onChange={value => this.setState({ targetPopularity: value })}\n            className=\"w-50\"\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    let { error } = this.state;\n\n    return (\n      <div className=\"text-right\">\n        <div className=\"w-100 text-center\">\n          <h4> Generate Recommendations </h4>\n          <br />\n        </div>\n        <Form onSubmit={data => console.log(data)}>\n          {this.renderSeedTracksDropdown()}\n          {this.renderSeedArtistsDropdown()}\n          {this.renderAudioFeatureSliders()}\n        </Form>\n        <Button onClick={this.handleRecommendationGeneration}>\n          Generate Tracks\n        </Button>\n        <hr />\n        {error && (\n          <div className=\"text-center mt-3\">\n            <h5 className=\"p-3 lead text-danger\">\n              <i className=\"fa fa-exclamation-triangle\"></i> {error}\n            </h5>\n          </div>\n        )}\n        {!error && (\n          <div className=\"mt-3\">\n            <TrackTable\n              playlistId={this.props.playlistId}\n              tracks={this.state.recommendedTracks}\n              updateCallback={this.updateSelectedPlaylist}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n/**\n * Maps the spotify api to the props of the recommendations component so that\n * we can use it to find recommendations.\n *\n * @param {*} state The incoming redux state\n */\nconst mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Recommendations);\n","import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Spacer from \"../../common/components/Spacer\";\nimport PlaylistInfo from \"./subcomponents/PlaylistInfo\";\nimport \"./playlist-builder.css\";\nimport PlaylistTrackStatistics from \"./subcomponents/PlaylistTrackStatistics\";\nimport TrackTable from \"./subcomponents/TrackTable\";\nimport PlaylistTracklist from \"./subcomponents/PlaylistTracklist\";\nimport Recommendations from \"./subcomponents/Recommendations\";\n\nclass PlaylistBuilder extends Component {\n  render() {\n    let { selectedPlaylist, api } = this.props;\n\n    if (!selectedPlaylist) {\n      return (\n        <div id=\"playlist-builder-wrapper\" className=\"p-4\">\n          <Col xs={12}>\n            <Spacer percentage={3} />\n            <div className=\"w-100 h-100 no-selected-playlist\">\n              <h1 className=\"display-4\"> No playlist selected... </h1>\n              <br />\n              <p className=\"lead\">\n                Please{\" \"}\n                <a href=\"#/profile\">select a playlist from your profile</a> to\n                begin editing.\n              </p>\n            </div>\n          </Col>\n        </div>\n      );\n    }\n\n    return (\n      <div id=\"playlist-builder-wrapper\" className=\"p-4\">\n        <PlaylistInfo playlist={selectedPlaylist} />\n        <PlaylistTrackStatistics tracks={selectedPlaylist.tracks} api={api} />\n        <br />\n        <PlaylistTracklist\n          tracks={selectedPlaylist.tracks}\n          playlistId={selectedPlaylist.id}\n        />\n        <br />\n        <hr />\n        <br />\n        <Recommendations\n          playlistTracks={selectedPlaylist.tracks}\n          playlistId={selectedPlaylist.id}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api ? state.api.spotifyApi : null,\n    selectedPlaylist: state.playlist ? state.playlist.selectedPlaylist : null\n  };\n};\n\nexport default connect(mapStateToProps)(PlaylistBuilder);\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport LoginPage from \"./modules/spotify-sign-in/LoginPage\";\nimport SpotifyLogoutButton from \"./modules/spotify-sign-in/SpotifyLogoutButton\";\nimport { getCookie } from \"./common/constants\";\nimport \"./App.css\";\nimport Navbar from \"./common/components/Navbar\";\nimport { connect } from \"react-redux\";\nimport { setSpotifyApiAction } from \"./redux/actions/apiActions\";\nimport Profile from \"./modules/profile/Profile\";\nimport PlaylistBuilder from \"./modules/playlist-builder/PlaylistBuilder\";\nimport { Container, Row } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedIn: false,\n      token: \"\"\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    // Add an event listener to update the App component\n    // when the hash link changes. This is to check if the cookie is expired or not.\n    window.addEventListener(\"hashchange\", () => {\n      this.checkForLogin();\n    });\n\n    this.checkForLogin();\n  }\n\n  checkForLogin() {\n    let token = getCookie(\"spotifyAccessToken\");\n\n    if (token !== \"\" && token != this.state.token) {\n      this.setState({ loggedIn: true, token: token });\n      this.props.setSpotifyApi(token);\n    } else if (token === \"\") {\n      this.setState({ loggedIn: false, token: \"\" });\n    }\n  }\n\n  render() {\n    let { loggedIn } = this.state;\n\n    return (\n      <HashRouter>\n        <div className=\"\" id=\"app-wrapper\">\n          <Navbar noButtons={!loggedIn} />\n\n          {loggedIn ? (\n            <div id=\"playlists-view-wrapper\">\n              <Container>\n                <Row>\n                  <Route exact path=\"(|/profile)\" component={Profile} />\n                  <Route\n                    exact\n                    path=\"/playlist-builder\"\n                    component={PlaylistBuilder}\n                  />\n                </Row>\n              </Container>\n            </div>\n          ) : (\n            <LoginPage />\n          )}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = state => {};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSpotifyApi: accessToken => dispatch(setSpotifyApiAction(accessToken))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import SpotifyWebApi from \"spotify-web-api-node\";\nimport { clientID, redirectURI } from \"../../common/constants\";\n\nexport const setSpotifyApiAction = accessToken => dispatch => {\n  let spotifyApi = new SpotifyWebApi({\n    clientId: clientID,\n    redirectUri: redirectURI\n  });\n\n  spotifyApi.setAccessToken(accessToken);\n\n  dispatch({\n    type: \"SET_SPOTIFY_API\",\n    payload: spotifyApi\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SELECTED_PLAYLIST\":\n      return {\n        ...state,\n        selectedPlaylist: action.payload\n      };\n    case \"LOAD_EDITABLE_PLAYLISTS\":\n      return {\n        ...state,\n        editablePlaylists: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport apiReducer from \"./apiReducer\";\nimport playlistReducer from \"./playlistReducer\";\n\nexport default combineReducers({\n  api: apiReducer,\n  playlist: playlistReducer\n});\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SPOTIFY_API\":\n      return {\n        ...state,\n        spotifyApi: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./common/slider.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <Provider\n    store={configureStore({ api: null, playlist: { editablePlaylists: [] } })}\n  >\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./redux/reducers/rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n/*\n * src/store.js\n * With initialState\n */\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"],"sourceRoot":""}