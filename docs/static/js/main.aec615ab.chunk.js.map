{"version":3,"sources":["common/constants.js","modules/spotify-sign-in/SpotifyLoginButton.jsx","common/components/Spacer.jsx","modules/spotify-sign-in/LoginPage.jsx","modules/spotify-sign-in/SpotifyLogoutButton.jsx","common/components/Navbar.jsx","redux/actions/playlistActions.js","modules/profile/subcomponents/personal-playlists/PlaylistCard.jsx","modules/profile/subcomponents/personal-playlists/PersonalPlaylists.jsx","modules/profile/subcomponents/ProfileInfo.jsx","modules/profile/subcomponents/TopArtists.jsx","modules/profile/subcomponents/TopTracks.jsx","modules/profile/Profile.jsx","modules/playlist-builder/subcomponents/PlaylistInfo.jsx","modules/playlist-builder/subcomponents/PlaylistTrackStatistics.jsx","modules/playlist-builder/subcomponents/TrackTable.jsx","modules/playlist-builder/subcomponents/PlaylistTracklist.jsx","modules/playlist-builder/subcomponents/Recommendations.jsx","modules/playlist-builder/PlaylistBuilder.jsx","App.js","redux/actions/apiActions.js","serviceWorker.js","redux/reducers/rootReducer.js","redux/reducers/apiReducer.js","redux/reducers/playlistReducer.js","index.js","store.js"],"names":["clientID","setCookie","cname","cvalue","expirationHours","d","Date","setTime","getTime","expires","toUTCString","document","cookie","deepCamelCaseKeys","variable","Array","forEach","object","index","Object","keys","key","camelCaseKeys","isBelowSmallBreakpoint","window","innerWidth","isBelowExtraSmallBreakpoint","SpotifyLoginButton","props","autoBind","data","token","access_token","location","reload","clientId","redirectUri","onSuccess","this","handleAccessToken","onFailure","error","console","log","scope","className","Component","Spacer","style","height","percentage","pixels","LoginPage","Row","id","Col","xs","md","SpotifyLogoutButton","Button","variant","onClick","handleLogout","color","width","fontSize","Navbar","addEventListener","forceUpdate","noButtons","to","setSelectedPlaylist","playlistId","spotifyApi","dispatch","a","playlistResponse","getPlaylist","then","body","notAllTracks","tracks","next","items","offset","getPlaylistTracks","concat","hash","type","payload","PlaylistCard","updateSelectedPlaylist","api","playlist","Swal","fire","title","text","showCancelButton","confirmButtonText","cancelButtonText","allowEscapeKey","allowOutsideClick","updatePlaylists","unfollowConfirmation","result","value","unfollowPlaylist","name","dismiss","DismissReason","cancel","sm","lg","images","Image","src","url","public","selectPlaylist","connect","PersonalPlaylists","state","playlists","getPersonalPlaylistData","userId","loadEditablePlaylists","setState","map","editablePlaylists","playlistsResponse","getUserPlaylists","limit","response","notAllPlaylists","morePlaylistsResponse","filter","owner","collaborative","loadUsersEditablePlaylists","ProfileInfo","profile","displayName","email","followers","externalUrls","fontWeight","total","TopArtists","_isMounted","topArtists","getMyTopArtists","time_range","topShortTermArtists","topMediumTermArtists","topLongTermArtists","Tabs","defaultActiveKey","Tab","eventKey","topArtist","roundedCircle","fluid","TopTracks","topTracks","getMyTopTracks","topShortTermTracks","topMediumTermTracks","topLongTermTracks","topTrack","album","Profile","getMe","PlaylistInfo","description","trackIds","playlistTrack","push","track","haveToLoop","length","trackStatistics","getAudioFeaturesForTracks","splice","audioFeatures","numOfStatisticsReceived","hypeScores","trackStatistic","danceability","energy","valence","tempo","popularity","trackUri","score","sortedHypeScores","sort","b","ascendingScores","descendingScores","reverse","curvedScores","createPlaylist","addTracksToPlaylist","PlaylistTrackStatistics","loudness","durationMs","calculateAverageStatistics","statistics","duration","ms","seconds","hours","Math","floor","minutes","msToHM","round","ProgressBar","animated","striped","now","TrackTable","spotifyTrackId","tracksInPlaylist","play","context_uri","uri","uris","updateCallback","removeTracksFromPlaylist","Table","responsive","hover","size","artists","artist","handleRemoveTrackFromPlaylist","handleAddTrackToPlaylist","handlePlayTrackOnSpotify","PlaylistTracklist","currentPage","newPageIndex","currentPageTracks","Pagination","Prev","disabled","changeCurrentPageHandler","Next","Recommendations","recommendedTracks","selectedArtistSeeds","0","1","2","selectedTrackSeeds","targetValence","targetEnergy","targetDanceability","targetBPM","targetPopularity","handleRecommendationGeneration","atLeastOneSeedSelected","updateRecommendations","seedArtistIds","seedIndex","seedTrackIds","query","target_bpm","target_valence","target_energy","target_danceability","target_popularity","seed_artists","seed_tracks","getRecommendations","message","artistSeeds","trackSeeds","event","target","playlistTracks","artistIdArray","Form","Group","controlId","seedNumber","Control","as","onChange","handleAddSeedArtist","numberOfSeedsFull","artistId","trackIdArray","handleAddSeedTrack","trackId","min","max","step","defaultValue","onSubmit","renderSeedTracksDropdown","renderSeedArtistsDropdown","renderAudioFeatureSliders","PlaylistBuilder","selectedPlaylist","href","App","loggedIn","checkForLogin","ca","split","i","c","charAt","substring","indexOf","getCookie","setSpotifyApi","Container","exact","path","component","React","accessToken","SpotifyWebApi","setAccessToken","setSpotifyApiAction","Boolean","hostname","match","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aec615ab.chunk.js","sourcesContent":["import camelCaseKeys from \"camelcase-keys\";\n\nexport let spotifyScopes =\n  \"user-top-read user-library-read \" +\n  \"playlist-modify-public playlist-read-private playlist-read-collaborative \" +\n  \"user-read-email playlist-modify-private streaming\";\n\nexport let redirectURI = \"https://playlistninja.app\";\nexport let clientID = \"90a54f792a9e4fff94eec8d0c0075bd0\";\n\nexport function setCookie(cname, cvalue, expirationHours) {\n  var d = new Date();\n  d.setTime(d.getTime() + expirationHours * 60 * 60 * 1000);\n  var expires = \"expires=\" + d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nexport function getCookie(cname) {\n  var name = cname + \"=\";\n  var ca = document.cookie.split(\";\");\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nexport function deepCamelCaseKeys(variable) {\n  if (variable === null) {\n    return null;\n  } else if (variable instanceof Array) {\n    variable.forEach((object, index) => {\n      variable[index] = deepCamelCaseKeys(object);\n    });\n\n    return variable;\n  } else if (variable instanceof Object) {\n    Object.keys(variable).forEach((key) => {\n      variable[key] = deepCamelCaseKeys(variable[key]);\n    });\n\n    return camelCaseKeys(variable);\n  } else {\n    return variable;\n  }\n}\n\nexport function isBelowLargeBreakpoint() {\n  return window.innerWidth < 1200;\n}\n\nexport function isBelowMediumBreakpoint() {\n  return window.innerWidth < 992;\n}\n\nexport function isBelowSmallBreakpoint() {\n  return window.innerWidth < 768;\n}\n\nexport function isBelowExtraSmallBreakpoint() {\n  return window.innerWidth < 576;\n}\n\nexport function msToHM(ms) {\n  let seconds = ms / 1000;\n\n  let hours = Math.floor(seconds / 3600);\n  seconds = seconds % 3600;\n\n  let minutes = Math.floor(seconds / 60);\n\n  return {\n    hours,\n    minutes,\n  };\n}\n","import React, { Component } from \"react\";\nimport SpotifyLogin from \"react-spotify-login\";\nimport { spotifyScopes, setCookie } from \"../../common/constants\";\nimport autoBind from \"react-autobind\";\nimport { redirectURI, clientID } from \"../../common/constants\";\nimport \"./sign-in.css\";\n\nclass SpotifyLoginButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  async handleAccessToken(data) {\n    let token = data.access_token;\n\n    // Set the token in cookies, we want to make sure that this happens first so we await it.\n    await setCookie(\"spotifyAccessToken\", token, 1);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <SpotifyLogin\n        clientId={clientID}\n        redirectUri={redirectURI}\n        onSuccess={this.handleAccessToken}\n        onFailure={error => console.log(error)}\n        scope={spotifyScopes}\n        className=\"btn btn-md btn-primary\"\n      />\n    );\n  }\n}\n\nexport default SpotifyLoginButton;\n","import React, { Component } from \"react\";\n\nexport default class Spacer extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: `${\n            this.props.percentage\n              ? this.props.percentage + \"vh\"\n              : this.props.pixels + \"px\"\n          }`\n        }}\n      ></div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport SpotifyLoginButton from \"./SpotifyLoginButton\";\nimport Spacer from \"../../common/components/Spacer\";\nimport \"./sign-in.css\";\nimport { Col, Row } from \"react-bootstrap\";\n\nclass LoginPage extends Component {\n  render() {\n    return (\n      <Row id=\"logged-out-wrapper\" className=\"mt-5 flex-content-center\">\n        <Col xs={0} md={2}></Col>\n        <Col xs={12} md={8} className=\"p-4\">\n          <h1 className=\"display-4 arts-and-crafts-font mobile-title-font\">\n            ULTIMATE CONTROL OVER THE COMPOSITION OF YOUR PLAYLISTS\n          </h1>\n          <p>\n            PlaylistNinja gives you the power to fine tune the powerful\n            recommendation engine in the Spotify API.\n          </p>\n          <p className=\"mb-4\">\n            We give you an interface that exposes the properties used in the\n            recommendation engine, allowing you to configure recommendations and\n            discover new music by selecting seeds and target properties when\n            searching for songs.\n          </p>\n          <SpotifyLoginButton />\n        </Col>\n        <Col xs={0} md={2}></Col>\n      </Row>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from \"react\";\nimport { setCookie } from \"../../common/constants\";\nimport { Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass SpotifyLogoutButton extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  handleLogout() {\n    // remove the cookie from the browser that holds the token to logout\n    setCookie(\"spotifyAccessToken\", \"\", 0);\n    document.location.reload();\n  }\n\n  render() {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={this.handleLogout}\n        style={{ color: \"red\", width: \"fit-content\" }}\n      >\n        <p className=\"lead\" style={{ fontSize: \"1rem\" }}>\n          Log Out\n        </p>\n      </Button>\n    );\n  }\n}\n\nexport default SpotifyLogoutButton;\n","import React, { Component } from \"react\";\nimport \"./common-components.css\";\nimport { isBelowSmallBreakpoint } from \"../constants\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Navbar extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-app-nav\">\n          {!this.props.noButtons && (\n            <div className=\"main-nav-button\">\n              <Link to=\"profile\" className=\"text-dark\">\n                <i\n                  className={`far fa-address-card ${\n                    isBelowSmallBreakpoint()\n                      ? \"main-nav-icon-phone\"\n                      : \"main-nav-icon-desktop\"\n                  }`}\n                />\n              </Link>\n            </div>\n          )}\n\n          <div className=\"main-nav-button\">\n            <i\n              className={`fa fa-user-ninja p-2 ${\n                isBelowSmallBreakpoint()\n                  ? \"main-nav-icon-phone\"\n                  : \"main-nav-icon-desktop\"\n              }`}\n            />\n            {isBelowSmallBreakpoint() ? (\n              <h6 className=\"m-0 arts-and-crafts-font\">PLAYLIST NINJA</h6>\n            ) : (\n              <h4 className=\"m-0 arts-and-crafts-font\">PLAYLIST NINJA</h4>\n            )}\n          </div>\n\n          {!this.props.noButtons && (\n            <div className=\"main-nav-button\">\n              <Link to=\"playlist-builder\" className=\"text-dark\">\n                <i\n                  className={`fa fa-sliders-h ${\n                    isBelowSmallBreakpoint()\n                      ? \"main-nav-icon-phone\"\n                      : \"main-nav-icon-desktop\"\n                  }`}\n                />\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"main-app-nav-ghost\" />\n      </div>\n    );\n  }\n}\n","export const setSelectedPlaylist = (\n  playlistId,\n  spotifyApi\n) => async dispatch => {\n  let playlistResponse = null;\n\n  await spotifyApi\n    .getPlaylist(playlistId)\n    .then(\n      async data => {\n        playlistResponse = data.body;\n\n        let notAllTracks = playlistResponse.tracks.next;\n\n        playlistResponse.tracks = playlistResponse.tracks.items;\n\n        if (notAllTracks) {\n          let offset = 100;\n\n          while (notAllTracks) {\n            await spotifyApi\n              .getPlaylistTracks(playlistId, { offset })\n              .then(data => {\n                if (!data.body.next) {\n                  notAllTracks = false;\n                }\n\n                offset += 100;\n\n                playlistResponse.tracks = playlistResponse.tracks.concat(\n                  data.body.items\n                );\n              });\n          }\n        }\n      },\n      error => {\n        playlistResponse = error;\n      }\n    )\n    .then(() => {\n      window.location.hash = \"#/playlist-builder\";\n    });\n\n  dispatch({\n    type: \"SET_SELECTED_PLAYLIST\",\n    payload: playlistResponse\n  });\n};\nexport const loadUsersEditablePlaylists = (\n  userId,\n  spotifyApi\n) => async dispatch => {\n  let playlistsResponse = null;\n\n  await spotifyApi.getUserPlaylists(userId, { limit: 50 }).then(\n    async response => {\n      playlistsResponse = response.body.items;\n      let notAllPlaylists = response.body.next;\n\n      if (notAllPlaylists) {\n        let offset = 50;\n\n        while (notAllPlaylists) {\n          await spotifyApi\n            .getUserPlaylists(userId, { limit: 50, offset })\n            .then(morePlaylistsResponse => {\n              if (!morePlaylistsResponse.body.next) {\n                notAllPlaylists = false;\n              }\n\n              offset += 50;\n\n              playlistsResponse = playlistsResponse.concat(\n                morePlaylistsResponse.body.items\n              );\n            });\n        }\n      }\n\n      playlistsResponse = playlistsResponse.filter(playlist => {\n        return playlist.owner.id == userId || playlist.collaborative;\n      });\n    },\n    error => {\n      playlistsResponse = error;\n    }\n  );\n\n  dispatch({\n    type: \"LOAD_EDITABLE_PLAYLISTS\",\n    payload: playlistsResponse\n  });\n};\n","import React, { Component } from \"react\";\nimport { Row, Col, Image, Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport \"./playlists.css\";\nimport { setSelectedPlaylist } from \"../../../../redux/actions/playlistActions\";\nimport {\n  isBelowSmallBreakpoint,\n  isBelowExtraSmallBreakpoint\n} from \"../../../../common/constants\";\n\nclass PlaylistCard extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  selectPlaylist() {\n    let { updateSelectedPlaylist, api, playlist } = this.props;\n\n    updateSelectedPlaylist(playlist.id, api);\n  }\n\n  /**\n   *  Renders a confirmation alert to make sure that the user wants to unfollow their playlist.\n   */\n\n  unfollowConfirmation() {\n    return Swal.fire({\n      title: \"Unfollow Playlist\",\n      text:\n        \"Are you sure you want to unfollow? It will no longer be visible in your library.\",\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, unfollow this playlist.\",\n      cancelButtonText: \"Cancel\",\n      allowEscapeKey: false,\n      allowOutsideClick: false\n    });\n  }\n\n  /**\n   *  Unfollows the playlist that this PlaylistCard represents.\n   */\n  unfollowPlaylist() {\n    let { playlist, api, updatePlaylists } = this.props;\n\n    this.unfollowConfirmation().then(result => {\n      if (result.value) {\n        api.unfollowPlaylist(playlist.id).then(() => {\n          Swal.fire({\n            type: \"success\",\n            text: `Unfollowed playlist: \"${playlist.name}\"`\n          });\n          updatePlaylists();\n        });\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire({ text: \"Did not unfollow playlist.\" });\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    let { playlist } = this.props;\n\n    return (\n      <Col xs={12} sm={12} lg={12} className=\"playlist-card-col\">\n        <Row\n          className={\n            !isBelowSmallBreakpoint()\n              ? \"playlist-card content-card playlist-row-height p-1\"\n              : \"playlist-card content-card p-1\"\n          }\n        >\n          <Col\n            xs={12}\n            sm={6}\n            className={`playlist-card-content text-center d-flex ${\n              isBelowExtraSmallBreakpoint() ? \"space-between\" : \"\"\n            }`}\n          >\n            {playlist.images[0] ? (\n              <Image\n                src={playlist.images[0].url}\n                className={\n                  isBelowSmallBreakpoint()\n                    ? \"mobile-playlist-card-image\"\n                    : \"desktop-playlist-card-image\"\n                }\n              />\n            ) : (\n              <div className={isBelowSmallBreakpoint() ? \"w-25\" : \"\"} />\n            )}\n\n            <div\n              className={\n                isBelowExtraSmallBreakpoint() ? \"text-right\" : \"text-left\"\n              }\n            >\n              <h5 className=\"m-1 ml-2\">{playlist.name}</h5>\n              <p className=\"ml-2 m-0\">\n                {playlist.public ? \"Public\" : \"Private\"}\n              </p>\n            </div>\n          </Col>\n\n          <Col\n            xs={12}\n            sm={6}\n            className={isBelowExtraSmallBreakpoint() ? \"p-0\" : \"\"}\n          >\n            {isBelowExtraSmallBreakpoint() && (\n              <div className=\"mobile-playlist-card-button-wrapper\">\n                <Button\n                  variant=\"primary\"\n                  className=\"\"\n                  onClick={this.selectPlaylist}\n                >\n                  Edit\n                </Button>\n                <Button\n                  variant=\"outline-danger\"\n                  onClick={this.unfollowPlaylist}\n                >\n                  Unfollow\n                </Button>\n              </div>\n            )}\n\n            {!isBelowExtraSmallBreakpoint() && (\n              <div className=\"desktop-playlist-card-button-wrapper\">\n                <Button\n                  variant=\"outline-danger\"\n                  className=\"m-1\"\n                  onClick={this.unfollowPlaylist}\n                >\n                  Unfollow\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  className=\"m-1\"\n                  onClick={this.selectPlaylist}\n                >\n                  Edit\n                </Button>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(PlaylistCard);\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport autoBind from \"react-autobind\";\nimport PlaylistCard from \"./PlaylistCard\";\nimport Spacer from \"../../../../common/components/Spacer\";\nimport { loadUsersEditablePlaylists } from \"../../../../redux/actions/playlistActions\";\n\nclass PersonalPlaylists extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playlists: null,\n      error: null\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    this.getPersonalPlaylistData();\n  }\n\n  getPersonalPlaylistData() {\n    let { userId, api } = this.props;\n\n    if (userId) {\n      this.props.loadEditablePlaylists(userId, api);\n    } else {\n      this.setState({ error: \"No user ID found, please reload\" });\n    }\n  }\n\n  render() {\n    if (this.props.playlists) {\n      let { playlists } = this.props;\n\n      return (\n        <Row className=\"text-center m-3 pb-2\">\n          <Col xs={12}>\n            <h3 className=\"display-5\"> My Playlists </h3>\n            <Spacer percentage={3} />\n          </Col>\n\n          {playlists.map(playlist => {\n            return (\n              <PlaylistCard\n                playlist={playlist}\n                api={this.props.api}\n                updatePlaylists={this.getPersonalPlaylistData}\n              />\n            );\n          })}\n        </Row>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport const mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi,\n    playlists: state.playlist.editablePlaylists\n  };\n};\n\nexport const mapDispatchToProps = dispatch => {\n  return {\n    loadEditablePlaylists: (userId, spotifyApi) =>\n      dispatch(loadUsersEditablePlaylists(userId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PersonalPlaylists);\n","import React, { Component } from \"react\";\nimport { Image, Col, Row } from \"react-bootstrap\";\nimport Spacer from \"../../../common/components/Spacer\";\nimport SpotifyLogoutButton from \"../../spotify-sign-in/SpotifyLogoutButton\";\n\nclass ProfileInfo extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let { profile } = this.props;\n\n    if (profile) {\n      let {\n        profile: { displayName, email, id, images, externalUrls, followers },\n      } = this.props;\n\n      return (\n        <Row>\n          <Col xs={12} md={6} className=\"text-right text-center-md\">\n            <Image\n              src={images[0] ? images[0].url : \"\"}\n              className=\"drop-shadow profile-image\"\n            />\n          </Col>\n          <Col xs={12} md={6} className=\"break-long-words text-center-md\">\n            <Spacer percentage={5} />\n            <h1 className=\"\">\n              <span style={{ fontWeight: 200, fontSize: \".8em\" }}>\n                Welcome,\n              </span>\n              &nbsp;\n              <span className=\"arts-and-crafts-font\">{displayName}</span>\n            </h1>\n            <h5 className=\"lead\">{email}</h5>\n            <h2 className=\"lead mb-0\">{followers.total} followers</h2>\n            <SpotifyLogoutButton />\n          </Col>\n        </Row>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ProfileInfo;\n","import React, { Component } from \"react\";\nimport { Image, Col, Row, Tabs, Tab } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../../common/constants\";\nimport Spacer from \"../../../common/components/Spacer\";\nimport \"./top-artists-and-tracks.css\";\n\nclass TopArtists extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topArtists: null,\n      error: null\n    };\n  }\n\n  /**\n   * Sets _isMounted to true and loads top artist data.\n   */\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.props.api.getMyTopArtists({ limit: 6, time_range: 'short_term' }).then(\n      data => {\n        // Only call setState in async functions if mounted\n        if (this._isMounted) {\n          this.setState({ topShortTermArtists: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.props.api.getMyTopArtists({ limit: 6, time_range: 'medium_term' }).then(\n      data => {\n        // Only call setState in async functions if mounted\n        if (this._isMounted) {\n          this.setState({ topMediumTermArtists: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.props.api.getMyTopArtists({ limit: 6, time_range: 'long_term' }).then(\n      data => {\n        // Only call setState in async functions if mounted\n        if (this._isMounted) {\n          this.setState({ topLongTermArtists: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  /**\n   * Sets _isMounted to false so that we don't call setState accidentally in an async function.\n   */\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    return (\n      <Row className=\"p-3\">\n        <Col xs={12} className=\"text-center\">\n          <h3 className=\"display-5\"> Top Artists </h3>\n          <Spacer percentage={4} />\n        </Col>\n\n        <Col xs={12} className=\"text-center justify-content-center\">\n          <Tabs defaultActiveKey=\"shortTerm\" id=\"nav-tabs\">\n            <Tab eventKey=\"shortTerm\" title=\"Short Term\">\n              <Row className=\"pt-4\">\n                {this.state.topShortTermArtists &&\n                  this.state.topShortTermArtists.items.map(topArtist => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topArtist.images[0].url}\n                            roundedCircle\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topArtist.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n            <Tab eventKey=\"mediumTerm\" title=\"Medium Term\">\n              <Row className=\"pt-4\">\n                {this.state.topMediumTermArtists &&\n                  this.state.topMediumTermArtists.items.map(topArtist => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topArtist.images[0].url}\n                            roundedCircle\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topArtist.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n            <Tab eventKey=\"longTerm\" title=\"Long Term\">\n              <Row className=\"pt-4\">\n                {this.state.topLongTermArtists &&\n                  this.state.topLongTermArtists.items.map(topArtist => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topArtist.images[0].url}\n                            roundedCircle\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topArtist.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n          </Tabs>\n        </Col>\n\n      </Row>\n    );\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nexport default connect(mapStateToProps)(TopArtists);\n","import React, { Component } from \"react\";\nimport { Image, Col, Row, Tabs, Tab } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../../common/constants\";\nimport Spacer from \"../../../common/components/Spacer\";\n\nclass TopTracks extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topTracks: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.props.api.getMyTopTracks({ limit: 12, time_range: 'short_term' }).then(\n      data => {\n        if (this._isMounted) {\n          this.setState({ topShortTermTracks: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.props.api.getMyTopTracks({ limit: 12, time_range: 'medium_term' }).then(\n      data => {\n        if (this._isMounted) {\n          this.setState({ topMediumTermTracks: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.props.api.getMyTopTracks({ limit: 12, time_range: 'long_term' }).then(\n      data => {\n        if (this._isMounted) {\n          this.setState({ topLongTermTracks: data.body });\n        }\n      },\n      error => {\n        if (this._isMounted) {\n          this.setState({ error: deepCamelCaseKeys(error) });\n        }\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  /**\n   * Sets _isMounted to false so not to call setState on an unmounted component.\n   */\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    return (\n      <Row className=\"p-3\">\n        <Col xs={12} className=\"text-center\">\n          <h3 className=\"display-5\"> Top Tracks </h3>\n          <Spacer percentage={4} />\n        </Col>\n\n        <Col xs={12} className=\"text-center justify-content-center\">\n          <Tabs defaultActiveKey=\"shortTerm\" id=\"nav-tabs\">\n            <Tab eventKey=\"shortTerm\" title=\"Short Term\">\n              <Row className=\"pt-4\">\n                {this.state.topShortTermTracks &&\n                  this.state.topShortTermTracks.items.map(topTrack => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topTrack.album.images[0].url}\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topTrack.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n            <Tab eventKey=\"mediumTerm\" title=\"Medium Term\">\n              <Row className=\"pt-4\">\n                {this.state.topMediumTermTracks &&\n                  this.state.topMediumTermTracks.items.map(topTrack => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topTrack.album.images[0].url}\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topTrack.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n            <Tab eventKey=\"longTerm\" title=\"Long Term\">\n              <Row className=\"pt-4\">\n                {this.state.topLongTermTracks &&\n                  this.state.topLongTermTracks.items.map(topTrack => {\n                    return (\n                      <Col xs={6} sm={4} lg={2} className=\"text-center\">\n                        <div className=\"p-2 break-long-words\">\n                          <Image\n                            src={topTrack.album.images[0].url}\n                            fluid\n                            className=\"drop-shadow mb-3\"\n                          />\n                          <p className=\"lead\">{topTrack.name}</p>\n                        </div>\n                      </Col>\n                    );\n                  })}\n              </Row>\n            </Tab>\n          </Tabs>\n        </Col>\n\n      </Row>\n    );\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nexport default connect(mapStateToProps)(TopTracks);\n","import React, { Component } from \"react\";\nimport \"./profile.css\";\nimport Spacer from \"../../common/components/Spacer\";\nimport PersonalPlaylists from \"./subcomponents/personal-playlists/PersonalPlaylists\";\nimport ProfileInfo from \"./subcomponents/ProfileInfo\";\nimport TopArtists from \"./subcomponents/TopArtists\";\nimport TopTracks from \"./subcomponents/TopTracks\";\nimport { connect } from \"react-redux\";\nimport { deepCamelCaseKeys } from \"../../common/constants\";\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      profile: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.api.spotifyApi.getMe().then(\n      data => {\n        this.setState({ profile: deepCamelCaseKeys(data.body) });\n      },\n      error => {\n        this.setState({ error: deepCamelCaseKeys(error) });\n      }\n    );\n\n    this.forceUpdate();\n  }\n\n  render() {\n    let { profile } = this.state;\n\n    if (profile) {\n      return (\n        <div className=\"profile-wrapper\">\n          <ProfileInfo profile={profile} />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <TopArtists />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <TopTracks />\n          <Spacer percentage={5} />\n          <hr className=\"w-75\" />\n          <Spacer percentage={5} />\n          <PersonalPlaylists userId={profile.id} />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nlet mapStateToProps = state => {\n  return {\n    api: state.api\n  };\n};\n\nexport default connect(mapStateToProps)(Profile);\n","import React, { Component } from \"react\";\nimport \"../playlist-builder.css\";\nimport { Image, Col, Row, Button } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport {\n  isBelowSmallBreakpoint,\n  deepCamelCaseKeys,\n} from \"../../../common/constants\";\n\nexport default class PlaylistInfo extends Component {\n  componentDidMount() {\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n\n    autoBind(this);\n  }\n\n  render() {\n    let { playlist } = this.props;\n\n    return (\n      <div id=\"playlist-info-wrapper\" className=\"p-2\">\n        <Row>\n          <Col className=\"playlist-image-wrapper\" xs={12} sm={6}>\n            {playlist.images[0] ? (\n              <Image\n                src={playlist.images[0].url}\n                className=\"playlist-info-image\"\n              />\n            ) : null}\n          </Col>\n          <Col\n            className=\"playlist-title-desc-wrapper text-right break-long-words p-3\"\n            xs={12}\n            sm={6}\n          >\n            <h2 className={!isBelowSmallBreakpoint() ? \"display-4\" : \"\"}>\n              {playlist.name}\n            </h2>\n            <p>{playlist.description || \"No description provided.\"}</p>\n            <p>\n              {playlist.followers.total}{\" \"}\n              {playlist.followers.total == 1 ? \"follower\" : \"followers\"}\n            </p>\n            {/*            \n              <Button onClick={this.generateHypeCurvePlaylist.bind(this)}>\n                Generate Hype Curve Playlist\n              </Button>\n            */}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  async generateHypeCurvePlaylist() {\n    let { api, playlist } = this.props;\n\n    let trackIds = [];\n\n    playlist.tracks.forEach((playlistTrack) => {\n      trackIds.push(playlistTrack.track.id);\n    });\n\n    let haveToLoop = trackIds.length > 100;\n    let trackStatistics = [];\n\n    if (trackIds.length !== 0) {\n      await api\n        .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n        .then((data) => {\n          let response = deepCamelCaseKeys(data.body);\n\n          if (response.audioFeatures) {\n          }\n          trackStatistics = trackStatistics.concat(response.audioFeatures);\n        });\n\n      if (haveToLoop) {\n        let numOfStatisticsReceived = 100;\n\n        while (haveToLoop) {\n          await api\n            .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n            .then((data) => {\n              let response = deepCamelCaseKeys(data.body);\n              trackStatistics = trackStatistics.concat(response.audioFeatures);\n              numOfStatisticsReceived += response.audioFeatures.length;\n            });\n\n          if (numOfStatisticsReceived === trackIds.length) {\n            haveToLoop = false;\n          }\n        }\n      }\n\n      var hypeScores = trackStatistics.map((trackStatistic) => {\n        let {\n          danceability,\n          energy,\n          valence,\n          tempo,\n          popularity,\n          id,\n        } = trackStatistic;\n        return {\n          trackUri: \"spotify:track:\" + id,\n          score: danceability * energy * valence * tempo * popularity,\n        };\n      });\n\n      // here we want to sort the hype scores, iterate through them and add every other element to two arrays.\n      // then we reverse one of the arrays and add it to the end, and we have a hype curve.\n      let sortedHypeScores = hypeScores.sort((a, b) => a.score - b.score);\n\n      var ascendingScores = [];\n      var descendingScores = [];\n\n      sortedHypeScores.forEach((score, index) => {\n        if (index % 2 == 0) {\n          ascendingScores.push(score);\n        } else {\n          descendingScores.push(score);\n        }\n      });\n\n      // Actually make descending scores descending\n      descendingScores.reverse();\n\n      let curvedScores = ascendingScores.concat(descendingScores);\n      let userId = \"\";\n      await api.getMe().then((response) => {\n        userId = response.body.id;\n      });\n\n      var playlistId = \"\";\n      await api\n        .createPlaylist(userId, playlist.name + \" - Hype Curve\")\n        .then((response) => {\n          playlistId = response.body.id;\n        });\n\n      await api.addTracksToPlaylist(\n        playlistId,\n        curvedScores.map((score) => score.trackUri)\n      );\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  deepCamelCaseKeys,\n  msToHM,\n  isBelowSmallBreakpoint\n} from \"../../../common/constants\";\nimport { Row, Col, ProgressBar } from \"react-bootstrap\";\n\nclass PlaylistTrackStatistics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempo: 0,\n      loudness: 0,\n      danceability: 0,\n      valence: 0,\n      energy: 0,\n      durationMs: 0,\n      popularity: 0\n    };\n  }\n\n  componentDidMount() {\n    this.calculateAverageStatistics();\n\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  async calculateAverageStatistics() {\n    let { api, tracks } = this.props;\n\n    let statistics = {\n      tempo: null,\n      danceability: null,\n      valence: null,\n      energy: null,\n      durationMs: null,\n      popularity: null\n    };\n\n    let trackIds = [];\n\n    tracks.forEach(playlistTrack => {\n      trackIds.push(playlistTrack.track.id);\n      statistics.popularity =\n        statistics.popularity + playlistTrack.track.popularity;\n    });\n\n    let haveToLoop = trackIds.length > 100;\n\n    let trackStatistics = [];\n\n    if (trackIds.length !== 0) {\n      await api\n        .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n        .then(data => {\n          let response = deepCamelCaseKeys(data.body);\n\n          if (response.audioFeatures) {\n            trackStatistics = trackStatistics.concat(response.audioFeatures);\n          }\n        });\n\n      if (haveToLoop) {\n        let numOfStatisticsReceived = 100;\n\n        while (haveToLoop) {\n          await api\n            .getAudioFeaturesForTracks(trackIds.splice(0, 100))\n            .then(data => {\n              let response = deepCamelCaseKeys(data.body);\n              trackStatistics = trackStatistics.concat(response.audioFeatures);\n              numOfStatisticsReceived += response.audioFeatures.length;\n            });\n\n          if (numOfStatisticsReceived === tracks.length) {\n            haveToLoop = false;\n          }\n        }\n      }\n\n      trackStatistics.forEach(trackStatistic => {\n        if (trackStatistic !== null) {\n          statistics.tempo = statistics.tempo + trackStatistic.tempo;\n          statistics.danceability =\n            statistics.danceability + trackStatistic.danceability;\n          statistics.valence = statistics.valence + trackStatistic.valence;\n          statistics.energy = statistics.energy + trackStatistic.energy;\n          statistics.durationMs =\n            statistics.durationMs + trackStatistic.durationMs;\n        }\n      });\n\n      this.setState({\n        tempo: statistics.tempo / tracks.length,\n        danceability: statistics.danceability / tracks.length,\n        valence: statistics.valence / tracks.length,\n        energy: statistics.energy / tracks.length,\n        durationMs: statistics.durationMs,\n        popularity: statistics.popularity / tracks.length\n      });\n    }\n  }\n\n  render() {\n    let {\n      tempo,\n      danceability,\n      valence,\n      energy,\n      durationMs,\n      popularity\n    } = this.state;\n\n    if (!(tempo && danceability && valence && energy && durationMs)) {\n      return (\n        <div className=\"m-1 mt-3\">\n          <Row className=\"p-2 justify-content-center\">\n            <Col xs={12} className=\"p-2 mb-2 text-center\">\n              No tracks in this playlist, so there are no statistics.\n            </Col>\n          </Row>\n        </div>\n      );\n    }\n\n    let duration = msToHM(Math.round(durationMs));\n\n    return (\n      <div className=\"m-1 mt-3\">\n        <Row className=\"p-2 justify-content-center\">\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Energy:\n            </p>\n            <ProgressBar animated striped now={energy * 100} />\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Danceability:\n            </p>\n            <ProgressBar animated striped now={danceability * 100} />\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Valence:\n            </p>\n            <ProgressBar animated striped now={valence * 100} />\n          </Col>\n        </Row>\n        <Row className=\"p-2 justify-content-center\">\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Tempo: <br />\n              {Math.round(tempo)}BPM\n            </p>\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Duration: <br />\n              {duration.hours > 0 ? duration.hours + \"hrs\" : \"\"}{\" \"}\n              {duration.minutes > 0 ? duration.minutes + \"mins\" : \"\"}\n            </p>\n          </Col>\n          <Col xs={4} sm={4} className=\"p-2 mb-2 text-center\">\n            <p\n              className={`mb-1 ${\n                isBelowSmallBreakpoint() ? \"mobile-small-font\" : \"\"\n              }`}\n            >\n              Popularity: <br />\n              {Math.round(popularity)}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistTrackStatistics;\n","import React, { Component } from \"react\";\nimport { Table, Button, Image } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport autoBind from \"react-autobind\";\nimport { setSelectedPlaylist } from \"../../../redux/actions/playlistActions\";\nimport \"../playlist-builder.css\";\n\nclass TrackTable extends Component {\n  constructor(props) {\n    super(props);\n\n    autoBind(this);\n  }\n\n  /**\n   * Handles playling a single track on the user's currently active spotify device.\n   * @param {string} spotifyTrackId The ID of the spotify track that should be played.\n   */\n  handlePlayTrackOnSpotify(spotifyTrackId) {\n    return () => {\n      let { api, playlistId, tracksInPlaylist } = this.props;\n\n      if (tracksInPlaylist) {\n        api\n          .play({\n            context_uri: `spotify:playlist:${playlistId}`,\n            offset: { uri: `spotify:track:${spotifyTrackId}` }\n          })\n          .then(\n            response => {\n              //TODO: Handle response data and store currently playing.\n            },\n            error => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      } else {\n        api\n          .play({\n            uris: [`spotify:track:${spotifyTrackId}`]\n          })\n          .then(\n            response => {\n              //TODO: Handle response data and store currently playing.\n            },\n            error => {\n              //TODO: Handle error case\n              console.error(error);\n            }\n          );\n      }\n    };\n  }\n\n  /**\n   * Handles adding a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be added.\n   */\n  handleAddTrackToPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api } = this.props;\n\n      api\n        .addTracksToPlaylist(playlistId, [`spotify:track:${spotifyTrackId}`])\n        .then(\n          async response => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          error => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  /**\n   * Handles removing a single track to the playlist with the id given to the TrackTable\n   * @param {string} spotifyTrackId The ID of the spotify track that should be removed.\n   */\n  handleRemoveTrackFromPlaylist(spotifyTrackId) {\n    return () => {\n      let { playlistId, api, setSelectedPlaylist } = this.props;\n\n      api\n        .removeTracksFromPlaylist(playlistId, [\n          { uri: `spotify:track:${spotifyTrackId}` }\n        ])\n        .then(\n          async response => {\n            // refresh the selected playlist\n            // TODO: make an action to add it instead of reloading the whole playlist.\n            await setSelectedPlaylist(playlistId, api);\n\n            if (this.props.updateCallback) {\n              this.props.updateCallback();\n            }\n          },\n          error => {\n            //TODO: Handle error case\n            console.error(error);\n          }\n        );\n    };\n  }\n\n  render() {\n    return (\n      <Table responsive striped hover size=\"sm\" className=\"text-left\">\n        <thead></thead>\n        <tbody>\n          {this.props.tracks.map(track => {\n            return (\n              <tr>\n                <td className=\"maxw-50-view\">\n                  <div className=\"d-flex align-center\">\n                    {track.album.images[0] && (\n                      <Image\n                        src={track.album.images[0].url}\n                        className=\"track-table-image m-1\"\n                      />\n                    )}\n                    <div className=\"break-long-words\">\n                      <p className=\"track-table-title\">{track.name}</p>\n                      <p className=\"track-table-font \">\n                        {track.artists.map((artist, index) => {\n                          return index === track.artists.length - 1\n                            ? artist.name\n                            : artist.name + \", \";\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"h-100 break-long-words d-flex justify-end p-1 align-center\">\n                  {this.props.tracksInPlaylist ? (\n                    <Button\n                      onClick={this.handleRemoveTrackFromPlaylist(track.id)}\n                      className=\"mr-1 mt-1 mb-1\"\n                      variant=\"danger\"\n                    >\n                      -\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={this.handleAddTrackToPlaylist(track.id)}\n                      className=\"mr-1 mt-1 mb-1\"\n                    >\n                      +\n                    </Button>\n                  )}\n                  <Button\n                    className=\"ml-1 mt-1 mb-1\"\n                    onClick={this.handlePlayTrackOnSpotify(track.id)}\n                  >\n                    {\" \"}\n                    Play{\" \"}\n                  </Button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TrackTable);\n","import React, { Component } from \"react\";\nimport { isBelowSmallBreakpoint } from \"../../../common/constants\";\nimport TrackTable from \"./TrackTable\";\nimport { Pagination } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass PlaylistTracklist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: 0\n    };\n\n    autoBind(this);\n  }\n\n  /**\n   * Returns an event handler that changes the current page to the\n   * page with the given index.\n   * @param {number} newPageIndex The index of the page to change to.\n   */\n  changeCurrentPageHandler(newPageIndex) {\n    return () => {\n      this.setState({ currentPage: newPageIndex });\n    };\n  }\n\n  render() {\n    let { currentPage } = this.state;\n    let { tracks } = this.props;\n\n    // Copy the tracks and splice the current page from the copy.\n    let tracksCopy = tracks.concat([]);\n    let currentPageTracks = tracksCopy.splice(currentPage * 8, 8);\n\n    // Map the playlist track objects into the actual track objects for display.\n    currentPageTracks = currentPageTracks.map(\n      playlistTrack => playlistTrack.track\n    );\n\n    return (\n      <div>\n        <div className=\"text-center\">\n          <h4> Track List </h4>\n          <br />\n        </div>\n        <TrackTable\n          tracks={currentPageTracks}\n          tracksInPlaylist={true}\n          playlistId={this.props.playlistId}\n        />\n        <div className=\"d-flex justify-content-center\">\n          <Pagination>\n            <Pagination.Prev\n              disabled={currentPage === 0}\n              onClick={this.changeCurrentPageHandler(\n                this.state.currentPage - 1\n              )}\n            />\n            <Pagination.Next\n              disabled={(currentPage + 1) * 8 >= tracks.length}\n              onClick={this.changeCurrentPageHandler(\n                this.state.currentPage + 1\n              )}\n            />\n          </Pagination>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistTracklist;\n","import React, { Component } from \"react\";\nimport TrackTable from \"./TrackTable\";\nimport { connect } from \"react-redux\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\nimport Slider from \"rc-slider\";\nimport { setSelectedPlaylist } from \"../../../redux/actions/playlistActions\";\n\nclass Recommendations extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recommendedTracks: [],\n      selectedArtistSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\"\n      },\n      selectedTrackSeeds: {\n        0: \"\",\n        1: \"\",\n        2: \"\"\n      },\n      targetValence: 0.5,\n      targetEnergy: 0.5,\n      targetDanceability: 0.5,\n      targetBPM: 100,\n      targetPopularity: 50,\n      error: null\n    };\n\n    autoBind(this);\n\n    window.addEventListener(\"resize\", () => {\n      this.forceUpdate();\n    });\n  }\n\n  componentDidMount() {\n    this.handleRecommendationGeneration();\n  }\n\n  /**\n   * A method to update the selected playlist. It calls the redux action to load a selected playlist with this playlist's id.\n   */\n  updateSelectedPlaylist() {\n    let { api, playlistId, setSelectedPlaylist } = this.props;\n    setSelectedPlaylist(playlistId, api);\n  }\n\n  /**\n   * Determines whether or not we should generate recommendations.\n   * Checks that there is at least one seed selected, if not it sets an\n   * error in the state.\n   *\n   * @returns void\n   */\n  handleRecommendationGeneration() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let atLeastOneSeedSelected = false;\n\n    Object.keys(selectedArtistSeeds).forEach(index => {\n      if (selectedArtistSeeds[index] !== \"\") {\n        atLeastOneSeedSelected = true;\n      }\n    });\n\n    if (!atLeastOneSeedSelected) {\n      Object.keys(selectedTrackSeeds).forEach(index => {\n        if (selectedTrackSeeds[index] !== \"\") {\n          atLeastOneSeedSelected = true;\n        }\n      });\n    }\n\n    if (atLeastOneSeedSelected) {\n      this.updateRecommendations();\n    } else {\n      this.setState({\n        error: \"You must choose at least one seed for recommendations.\"\n      });\n    }\n  }\n\n  /**\n   * Updates the recommendations for the playlist with the currently\n   * selected values and seeds and updates the table.\n   *\n   * @returns void\n   */\n  updateRecommendations() {\n    let { api } = this.props;\n    let {\n      selectedArtistSeeds,\n      selectedTrackSeeds,\n      targetValence,\n      targetEnergy,\n      targetDanceability,\n      targetBPM,\n      targetPopularity\n    } = this.state;\n\n    let seedArtistIds = [];\n    Object.keys(selectedArtistSeeds).forEach(seedIndex => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        seedArtistIds.push(selectedArtistSeeds[seedIndex]);\n      }\n    });\n\n    let seedTrackIds = [];\n    Object.keys(selectedTrackSeeds).forEach(seedIndex => {\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        seedTrackIds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    let query = {\n      limit: 35,\n      target_bpm: targetBPM,\n      target_valence: targetValence,\n      target_energy: targetEnergy,\n      target_danceability: targetDanceability,\n      target_popularity: targetPopularity,\n      seed_artists: seedArtistIds,\n      seed_tracks: seedTrackIds\n    };\n\n    api.getRecommendations(query).then(\n      data => {\n        this.setState({ recommendedTracks: data.body.tracks, error: null });\n      },\n      error => {\n        this.setState({ error: error.message });\n      }\n    );\n  }\n\n  /**\n   * Method to see if all the seeds for recommendations are filled since\n   * Spotify only allows 5 seeds of any type.\n   *\n   * @returns a boolean representing whether or not we have the max amounts of seeds.\n   */\n  numberOfSeedsFull() {\n    let { selectedArtistSeeds, selectedTrackSeeds } = this.state;\n\n    let artistSeeds = [];\n    let trackSeeds = [];\n\n    [0, 1, 2].forEach(seedIndex => {\n      if (selectedArtistSeeds[seedIndex] !== \"\") {\n        artistSeeds.push(selectedArtistSeeds[seedIndex]);\n      }\n\n      if (selectedTrackSeeds[seedIndex] !== \"\") {\n        trackSeeds.push(selectedTrackSeeds[seedIndex]);\n      }\n    });\n\n    return artistSeeds.length + trackSeeds.length >= 5;\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed artist to change.\n   */\n  handleAddSeedArtist(index) {\n    return event => {\n      this.setState({\n        selectedArtistSeeds: {\n          ...this.state.selectedArtistSeeds,\n          [index]: event.target.value\n        }\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed artists.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedArtistsDropdown() {\n    let { playlistTracks } = this.props;\n\n    let artists = {};\n\n    playlistTracks.forEach(playlistTrack => {\n      playlistTrack.track.artists.forEach(artist => {\n        artists[artist.id] = artist.name;\n      });\n    });\n\n    let artistIdArray = Object.keys(artists);\n\n    return (\n      <Form.Group controlId=\"seedArtists\">\n        <Row className=\"w-100 m-0\">\n          <Col xs={12} className=\"text-left\">\n            <h5 className=\"lead\">Similar Artists</h5>\n          </Col>\n\n          {[1, 2, 3].map(seedNumber => {\n            let { selectedArtistSeeds } = this.state;\n\n            return (\n              <Col sm={12} md={4} className=\"p-1\">\n                <Form.Control\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedArtist(seedNumber - 1)}\n                  disabled={\n                    selectedArtistSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                >\n                  <option value=\"\">None</option>\n                  {artistIdArray.map(artistId => {\n                    return (\n                      <option value={artistId}>{artists[artistId]}</option>\n                    );\n                  })}\n                </Form.Control>\n              </Col>\n            );\n          })}\n        </Row>\n      </Form.Group>\n    );\n  }\n\n  /**\n   * Returns an event handler that sets the seed track with the given\n   * index to the value of the event's target.\n   *\n   * @param {number} index The index of the seed track to change.\n   */\n  handleAddSeedTrack(index) {\n    return event => {\n      this.setState({\n        selectedTrackSeeds: {\n          ...this.state.selectedTrackSeeds,\n          [index]: event.target.value\n        }\n      });\n    };\n  }\n\n  /**\n   * Renders the dropdown menus for selecting seed tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderSeedTracksDropdown() {\n    let { playlistTracks } = this.props;\n\n    let tracks = {};\n\n    playlistTracks.forEach(playlistTrack => {\n      let track = playlistTrack.track;\n\n      tracks[track.id] = track.name;\n    });\n\n    let trackIdArray = Object.keys(tracks);\n\n    return (\n      <Form.Group controlId=\"seedTracks\">\n        <Row className=\"w-100 m-0\">\n          <Col xs={12} className=\"text-left\">\n            <h5 className=\"lead\">Similar Tracks</h5>\n          </Col>\n\n          {[1, 2, 3].map(seedNumber => {\n            let { selectedTrackSeeds } = this.state;\n\n            return (\n              <Col sm={12} md={4} className=\"p-1\">\n                <Form.Control\n                  key={seedNumber - 1}\n                  as=\"select\"\n                  onChange={this.handleAddSeedTrack(seedNumber - 1)}\n                  disabled={\n                    selectedTrackSeeds[seedNumber - 1] === \"\" &&\n                    this.numberOfSeedsFull()\n                  }\n                >\n                  <option value=\"\">None</option>\n                  {trackIdArray.map(trackId => {\n                    return <option value={trackId}>{tracks[trackId]}</option>;\n                  })}\n                </Form.Control>\n              </Col>\n            );\n          })}\n        </Row>\n      </Form.Group>\n    );\n  }\n\n  /**\n   * Renders the sliders for selecting target audio features for the\n   * recommended tracks.\n   *\n   * @returns JSX.Element\n   */\n  renderAudioFeatureSliders() {\n    return (\n      <Row className=\"w-100 m-0\">\n        <Col xs={12} className=\"text-left\">\n          <h5 className=\"lead\">Target Statistics</h5>\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Danceability </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetDanceability * 100}\n            onChange={value =>\n              this.setState({ targetDanceability: value / 100 })\n            }\n            className=\"w-50\"\n          />\n        </Col>\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Energy </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetEnergy * 100}\n            onChange={value => this.setState({ targetEnergy: value / 100 })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Valence </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={50}\n            value={this.state.targetValence * 100}\n            onChange={value => this.setState({ targetValence: value / 100 })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Tempo </p>\n          <Slider\n            min={0}\n            max={250}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetBPM}\n            onChange={value => this.setState({ targetBPM: value })}\n            className=\"w-50\"\n          />\n        </Col>\n\n        <Col xs={12} className=\"p-2 d-flex align-center space-between\">\n          <p className=\"mb-0 mr-2\"> Popularity </p>\n          <Slider\n            min={0}\n            max={100}\n            step={1}\n            defaultValue={100}\n            value={this.state.targetPopularity}\n            onChange={value => this.setState({ targetPopularity: value })}\n            className=\"w-50\"\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n  render() {\n    let { error } = this.state;\n\n    return (\n      <div className=\"text-right\">\n        <div className=\"w-100 text-center\">\n          <h4> Generate Recommendations </h4>\n          <br />\n        </div>\n        <Form onSubmit={data => console.log(data)}>\n          {this.renderSeedTracksDropdown()}\n          {this.renderSeedArtistsDropdown()}\n          {this.renderAudioFeatureSliders()}\n        </Form>\n        <Button onClick={this.handleRecommendationGeneration}>\n          Generate Tracks\n        </Button>\n        <hr />\n        {error && (\n          <div className=\"text-center mt-3\">\n            <h5 className=\"p-3 lead text-danger\">\n              <i className=\"fa fa-exclamation-triangle\"></i> {error}\n            </h5>\n          </div>\n        )}\n        {!error && (\n          <div className=\"mt-3\">\n            <TrackTable\n              playlistId={this.props.playlistId}\n              tracks={this.state.recommendedTracks}\n              updateCallback={this.updateSelectedPlaylist}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n/**\n * Maps the spotify api to the props of the recommendations component so that\n * we can use it to find recommendations.\n *\n * @param {*} state The incoming redux state\n */\nconst mapStateToProps = state => {\n  return {\n    api: state.api.spotifyApi\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelectedPlaylist: (playlistId, spotifyApi) =>\n      dispatch(setSelectedPlaylist(playlistId, spotifyApi))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Recommendations);\n","import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport Spacer from \"../../common/components/Spacer\";\nimport PlaylistInfo from \"./subcomponents/PlaylistInfo\";\nimport \"./playlist-builder.css\";\nimport PlaylistTrackStatistics from \"./subcomponents/PlaylistTrackStatistics\";\nimport TrackTable from \"./subcomponents/TrackTable\";\nimport PlaylistTracklist from \"./subcomponents/PlaylistTracklist\";\nimport Recommendations from \"./subcomponents/Recommendations\";\n\nclass PlaylistBuilder extends Component {\n  render() {\n    let { selectedPlaylist, api } = this.props;\n\n    if (!selectedPlaylist) {\n      return (\n        <div id=\"playlist-builder-wrapper\" className=\"p-4\">\n          <Col xs={12}>\n            <Spacer percentage={3} />\n            <div className=\"w-100 h-100 no-selected-playlist\">\n              <h1 className=\"display-4\"> No playlist selected... </h1>\n              <br />\n              <p className=\"lead\">\n                Please{\" \"}\n                <a href=\"#/profile\">select a playlist from your profile</a> to\n                begin editing.\n              </p>\n            </div>\n          </Col>\n        </div>\n      );\n    }\n\n    return (\n      <div id=\"playlist-builder-wrapper\" className=\"p-4\">\n        <PlaylistInfo playlist={selectedPlaylist} api={api} />\n        <PlaylistTrackStatistics tracks={selectedPlaylist.tracks} api={api} />\n        <br />\n        <PlaylistTracklist\n          tracks={selectedPlaylist.tracks}\n          playlistId={selectedPlaylist.id}\n        />\n        <br />\n        <hr />\n        <br />\n        <Recommendations\n          playlistTracks={selectedPlaylist.tracks}\n          playlistId={selectedPlaylist.id}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    api: state.api ? state.api.spotifyApi : null,\n    selectedPlaylist: state.playlist ? state.playlist.selectedPlaylist : null\n  };\n};\n\nexport default connect(mapStateToProps)(PlaylistBuilder);\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport LoginPage from \"./modules/spotify-sign-in/LoginPage\";\nimport SpotifyLogoutButton from \"./modules/spotify-sign-in/SpotifyLogoutButton\";\nimport { getCookie } from \"./common/constants\";\nimport \"./App.css\";\nimport Navbar from \"./common/components/Navbar\";\nimport { connect } from \"react-redux\";\nimport { setSpotifyApiAction } from \"./redux/actions/apiActions\";\nimport Profile from \"./modules/profile/Profile\";\nimport PlaylistBuilder from \"./modules/playlist-builder/PlaylistBuilder\";\nimport { Container, Row } from \"react-bootstrap\";\nimport autoBind from \"react-autobind\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedIn: false,\n      token: \"\",\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    // Add an event listener to update the App component\n    // when the hash link changes. This is to check if the cookie is expired or not.\n    window.addEventListener(\"hashchange\", () => {\n      this.checkForLogin();\n    });\n\n    this.checkForLogin();\n  }\n\n  checkForLogin() {\n    let token = getCookie(\"spotifyAccessToken\");\n\n    if (token !== \"\" && token != this.state.token) {\n      this.setState({ loggedIn: true, token: token });\n      this.props.setSpotifyApi(token);\n    } else if (token === \"\") {\n      this.setState({ loggedIn: false, token: \"\" });\n    }\n  }\n\n  render() {\n    let { loggedIn } = this.state;\n\n    return (\n      <HashRouter>\n        <div className=\"\" id=\"app-wrapper\">\n          <Navbar noButtons={!loggedIn} />\n\n          {loggedIn ? (\n            <div id=\"playlists-view-wrapper\">\n              <Container>\n                <Row>\n                  <Route exact path=\"(|/profile)\" component={Profile} />\n                  <Route\n                    exact\n                    path=\"/playlist-builder\"\n                    component={PlaylistBuilder}\n                  />\n                </Row>\n              </Container>\n            </div>\n          ) : (\n            <Container>\n              <LoginPage />\n            </Container>\n          )}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSpotifyApi: (accessToken) => dispatch(setSpotifyApiAction(accessToken)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import SpotifyWebApi from \"spotify-web-api-node\";\nimport { clientID, redirectURI } from \"../../common/constants\";\n\nexport const setSpotifyApiAction = accessToken => dispatch => {\n  let spotifyApi = new SpotifyWebApi({\n    clientId: clientID,\n    redirectUri: redirectURI\n  });\n\n  spotifyApi.setAccessToken(accessToken);\n\n  dispatch({\n    type: \"SET_SPOTIFY_API\",\n    payload: spotifyApi\n  });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport apiReducer from \"./apiReducer\";\nimport playlistReducer from \"./playlistReducer\";\n\nexport default combineReducers({\n  api: apiReducer,\n  playlist: playlistReducer\n});\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SPOTIFY_API\":\n      return {\n        ...state,\n        spotifyApi: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","export default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_SELECTED_PLAYLIST\":\n      return {\n        ...state,\n        selectedPlaylist: action.payload\n      };\n    case \"LOAD_EDITABLE_PLAYLISTS\":\n      return {\n        ...state,\n        editablePlaylists: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./common/slider.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <Provider\n    store={configureStore({ api: null, playlist: { editablePlaylists: [] } })}\n  >\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./redux/reducers/rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n/*\n * src/store.js\n * With initialState\n */\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"],"sourceRoot":""}